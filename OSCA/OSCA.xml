<?xml version="1.0"?>
<doc>
    <assembly>
        <name>OSCA</name>
    </assembly>
    <members>
        <member name="T:OSCA.ICA">
            <summary>
            The OSCA CA interface
            </summary>
            <remarks>Always use this interface in preference to class methods etc.</remarks>
        </member>
        <member name="M:OSCA.ICA.IssueCertificate(Org.BouncyCastle.Pkcs.Pkcs10CertificationRequest,OSCA.Profile.Profile)">
            <summary>
            Issue a certificate based on a PKCS#10 certificate request object
            </summary>
            <param name="Request">The request.</param>
            <param name="Profile">OSCA Profile instance</param>
            <returns></returns>
        </member>
        <member name="M:OSCA.ICA.IssueCertificate(Org.BouncyCastle.Pkcs.Pkcs10CertificationRequest,OSCA.Profile.Profile,System.DateTime,System.DateTime)">
            <summary>
            Issue a certificate based on a PKCS#10 certificate request object
            </summary>
            <param name="Request">The request.</param>
            <param name="Profile">OSCA Profile instance</param>
            <param name="NotBefore">The not before.</param>
            <param name="NotAfter">The not after.</param>
            <returns>X509 certificate</returns>
        </member>
        <member name="M:OSCA.ICA.IssueCertificate(System.Byte[],OSCA.Profile.Profile)">
            <summary>
            Issue a certificate based on an encoded PKCS#10 certificate request
            </summary>
            <param name="Request">PKCS#10 certificate request object</param>
            <param name="Profile">OSCA Profile instance</param>
            <returns>
            X509 certificate
            </returns>
        </member>
        <member name="M:OSCA.ICA.IssueCertificate(System.Byte[],OSCA.ValidityPeriod)">
            <summary>
            Issue a certificate based on an encoded PKCS#10 certificate request
            </summary>
            <param name="Request">The request.</param>
            <param name="Validity">Validity period for the certificate</param>
            <returns>
            X509 certificate
            </returns>
        </member>
        <member name="M:OSCA.ICA.IssueCertificate(Org.BouncyCastle.Pkcs.Pkcs10CertificationRequest,OSCA.ValidityPeriod)">
            <summary>
            Issue a certificate based on a PKCS#10 certificate request object
            </summary>
            <param name="Request">The request.</param>
            <param name="Validity">Validity period for the certificate</param>
            <returns>
            X509 certificate
            </returns>
        </member>
        <member name="M:OSCA.ICA.RevokeCertificate(Org.BouncyCastle.X509.X509Certificate,OSCA.CRLReason)">
            <summary>
            Revoke a certificate
            </summary>
            <param name="Certificate">The certificate.</param>
            <param name="Reason">Reason for revocation</param>
            <returns>
            Status of the certificate
            </returns>
        </member>
        <member name="M:OSCA.ICA.UnRevokeCertificate(Org.BouncyCastle.X509.X509Certificate)">
            <summary>
            Unrevoke certificate. (unsuspend)
            </summary>
            <param name="Certificate">The certificate.</param>
            <returns></returns>
        </member>
        <member name="M:OSCA.ICA.IssueCRL">
            <summary>
            Issue a CRL (containing all revoked certificates)
            </summary>
            <returns>CRL number</returns>
        </member>
        <member name="M:OSCA.ICA.GetCRL">
            <summary>
            Retrieve the current CRL
            </summary>
            <returns>Current CRL</returns>
        </member>
        <member name="M:OSCA.ICA.Backup(System.String,System.String)">
            <summary>
            Backup the CA key material to a PKCS#12 file
            </summary>
            <param name="Password">Strong password used for encryption</param>
            <param name="OutFile">The output file.</param>
        </member>
        <member name="M:OSCA.ICA.StopCA">
            <summary>
            Writes a 'CA Stopped' event to the log
            </summary>
            <remarks>To 'stop' the CA, delete the object</remarks>
        </member>
        <member name="P:OSCA.ICA.LastCRLNumber">
            <summary>
            Serial number of the last CRL issued
            </summary>
        </member>
        <member name="P:OSCA.ICA.LastSerialNumber">
            <summary>
            Serial number of the last certificate issued
            </summary>
        </member>
        <member name="P:OSCA.ICA.FIPS140Mode">
            <summary>
            True if the CA is configured to use FIPS 140 mode
            </summary>
        </member>
        <member name="P:OSCA.ICA.Type">
            <summary>
            Role of CA (rootCA | subCA)
            </summary>
        </member>
        <member name="P:OSCA.ICA.CAName">
            <summary>
            Distinguished name of the CA
            </summary>
        </member>
        <member name="P:OSCA.ICA.PublicKeyAlgorithm">
            <summary>
            Algorithm and key size for the CA signing key
            </summary>
        </member>
        <member name="P:OSCA.ICA.SignatureAlgorithm">
            <summary>
            CA signature algorithm
            </summary>
        </member>
        <member name="P:OSCA.ICA.Certificate">
            <summary>
            CA Certificate
            </summary>
        </member>
        <member name="T:OSCA.Profile.PolicyMapping">
            <summary>
            Policy mapping information
            </summary>
        </member>
        <member name="F:OSCA.Profile.PolicyMapping.issuerOid">
            <summary>
            Issuer policy oid
            </summary>
        </member>
        <member name="F:OSCA.Profile.PolicyMapping.issuerPolicyName">
            <summary>
            Issuer policy name
            </summary>
        </member>
        <member name="F:OSCA.Profile.PolicyMapping.subjectOid">
            <summary>
            Subject policy oid
            </summary>
        </member>
        <member name="F:OSCA.Profile.PolicyMapping.subjectPolicyName">
            <summary>
            Subject policy name
            </summary>
        </member>
        <member name="T:OSCA.Profile.policyMappings">
            <summary>
            Policy Mappings Extension
            </summary>
            <remarks>
            ASN.1 description of the extension from RFC 5280
            <code>
            id-ce-policyMappings OBJECT IDENTIFIER ::=  { id-ce 33 }
            
            PolicyMappings ::= SEQUENCE SIZE (1..MAX) OF SEQUENCE {
                issuerDomainPolicy      CertPolicyId,
                subjectDomainPolicy     CertPolicyId }
                
            CertPolicyId ::= OBJECT IDENTIFIER
            </code>
            </remarks>
        </member>
        <member name="T:OSCA.Profile.ProfileExtension">
            <summary>
            Abstract base class for OSCA profile system 
            </summary>
        </member>
        <member name="F:OSCA.Profile.ProfileExtension.name">
            <summary>
            Extension name (per RFC5280)
            </summary>
        </member>
        <member name="F:OSCA.Profile.ProfileExtension.displayName">
            <summary>
            Extension name (per OSCA profile system)
            </summary>
        </member>
        <member name="F:OSCA.Profile.ProfileExtension.xmlValue">
            <summary>
            OSCA XML description of extension
            </summary>
        </member>
        <member name="F:OSCA.Profile.ProfileExtension.critical">
            <summary>
            Extension criticality
            </summary>
        </member>
        <member name="F:OSCA.Profile.ProfileExtension.oid">
            <summary>
            Extension OID
            </summary>
        </member>
        <member name="F:OSCA.Profile.ProfileExtension.encValue">
            <summary>
            DER encoded extension value (not wrapped in OctetString)
            </summary>
        </member>
        <member name="M:OSCA.Profile.ProfileExtension.#ctor">
            <summary>
            Null constructor
            </summary>
        </member>
        <member name="M:OSCA.Profile.ProfileExtension.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Create an extension from an OSCA XML extension description
            </summary>
            <remarks>Sub classses must provide an implementation to decode their values</remarks>
            <param name="Xml">XML description</param>
        </member>
        <member name="M:OSCA.Profile.ProfileExtension.#ctor(Org.BouncyCastle.Asn1.X509.X509Extension)">
            <summary>
            Create an extension from an existing X509 extension
            </summary>
            <remarks>Sub classses must provide an implementation to decode their values</remarks>
            <param name="Extension">X509 extension</param>
        </member>
        <member name="M:OSCA.Profile.ProfileExtension.ToXml">
            <summary>
            Describe an extension using the OSCA XML extension format
            </summary>
            <remarks>Sub classses must provide an implementation to describe their values</remarks>
            <returns>OSCA XML extension description</returns>
        </member>
        <member name="M:OSCA.Profile.ProfileExtension.fromXml(System.Xml.Linq.XElement)">
            <summary>
            Read the header of an OSCA XML description
            </summary>
            <remarks>Sub classses should call this method before decoding their values</remarks>
            <param name="ext">OSCA XML extension description</param>
        </member>
        <member name="M:OSCA.Profile.ProfileExtension.strCritical">
            <summary>
            Returns a string containing the criticality
            </summary>
            <remarks>Primarily for use in the ToString() methods in subclasses</remarks>
            <returns>String describing criticality</returns>
        </member>
        <member name="P:OSCA.Profile.ProfileExtension.Name">
            <summary>
            Extension name
            </summary>
        </member>
        <member name="P:OSCA.Profile.ProfileExtension.DisplayName">
            <summary>
            Extension display name
            </summary>
        </member>
        <member name="P:OSCA.Profile.ProfileExtension.OID">
            <summary>
            Extension OID
            </summary>
        </member>
        <member name="P:OSCA.Profile.ProfileExtension.XmlValue">
            <summary>
            XML representation of the extension
            </summary>
        </member>
        <member name="P:OSCA.Profile.ProfileExtension.Critical">
            <summary>
            Extension criticality
            </summary>
        </member>
        <member name="P:OSCA.Profile.ProfileExtension.DerEncoding">
            <summary>
            DER encoding of the extension
            </summary>
        </member>
        <member name="M:OSCA.Profile.policyMappings.#ctor">
            <summary>
            Create PolicyMappings extension
            </summary>
        </member>
        <member name="M:OSCA.Profile.policyMappings.#ctor(System.Boolean)">
            <summary>
            Create PolicyMappings extension using supplied values
            </summary>
            <param name="Critical">True = Critical, False = Not Critical</param>
        </member>
        <member name="M:OSCA.Profile.policyMappings.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Create PolicyMappings extension from XML profile file entry
            </summary>
            <param name="xml">XML version of the extension</param>
            <remarks>Sample OSCA XML description of the PolicyMappings extension:
            <code>
            &lt;Extension&gt;
             &lt;name description="Policy Mappings"&gt;PolicyMappings&lt;/name&gt;
               &lt;critical&gt;false&lt;/critical&gt;
               &lt;value&gt;
                 &lt;mapping&gt;
                   &lt;issuerPolicy name="Some policy"&gt;1.2.3.4&lt;/issuerPolicy&gt;
                   &lt;subjectPolicy name="Other policy"&gt;4.5.6.7&lt;/subjectPolicy&gt;
                 &lt;/mapping&gt;
               &lt;/value&gt;
            &lt;/Extension&gt;
            </code>
            </remarks>
        </member>
        <member name="M:OSCA.Profile.policyMappings.#ctor(Org.BouncyCastle.Asn1.X509.X509Extension)">
            <summary>
            Create PolicyMappings extension from X509Extension
            </summary>
            <param name="Extension">Extension instance</param>
        </member>
        <member name="M:OSCA.Profile.policyMappings.Add(OSCA.Profile.PolicyMapping)">
            <summary>
            Add a new PolicyMapping to the extension
            </summary>
            <param name="Mapping">Policy mapping</param>
        </member>
        <member name="M:OSCA.Profile.policyMappings.Remove(OSCA.Profile.PolicyMapping)">
            <summary>
            Remove a PolicyMapping from the extension
            </summary>
            <param name="Mapping">Policy mapping</param>
        </member>
        <member name="M:OSCA.Profile.policyMappings.ToXml">
            <summary>
            Provide an XML version of the extension
            </summary>
            <returns>XML encoding of the extension</returns>
            <remarks>Sample OSCA XML description of the PolicyMappings extension:
            <code>
            &lt;Extension&gt;
             &lt;name description="Policy Mappings"&gt;PolicyMappings&lt;/name&gt;
               &lt;critical&gt;false&lt;/critical&gt;
               &lt;value&gt;
                 &lt;mapping&gt;
                   &lt;issuerPolicy name="Some policy"&gt;1.2.3.4&lt;/issuerPolicy&gt;
                   &lt;subjectPolicy name="Other policy"&gt;4.5.6.7&lt;/subjectPolicy&gt;
                 &lt;/mapping&gt;
               &lt;/value&gt;
            &lt;/Extension&gt;
            </code>
            </remarks>
        </member>
        <member name="M:OSCA.Profile.policyMappings.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that describes this extension
            </summary>
            <returns>
            A <see cref="T:System.String"/> that describes this extension
            </returns>
        </member>
        <member name="P:OSCA.Profile.policyMappings.Mappings">
            <summary>
            List of mappings
            </summary>
        </member>
        <member name="P:OSCA.Profile.policyMappings.PolicyMappings">
            <summary>
            DER encoded value of PolicyMappings
            </summary>
        </member>
        <member name="P:OSCA.Profile.policyMappings.DerEncoding">
            <summary>
            DER encoded value of extension
            </summary>
        </member>
        <member name="T:OSCA.Log.LogEvent">
            <summary>
            OSCA Event logger
            </summary>
        </member>
        <member name="M:OSCA.Log.LogEvent.WriteEvent(OSCA.Log.Logger,OSCA.Log.LogEvent.EventType,System.String)">
            <summary>
            Write an event to the log
            </summary>
            <param name="loggerInstance">Instance of the event logger</param>
            <param name="id">Event type</param>
            <param name="message">Text message</param>
        </member>
        <member name="T:OSCA.Log.LogEvent.EventType">
            <summary>
            Event types
            </summary>
        </member>
        <member name="F:OSCA.Log.LogEvent.EventType.CreateCA">
            <summary>
            Create CA event
            </summary>
        </member>
        <member name="F:OSCA.Log.LogEvent.EventType.StartCA">
            <summary>
            Start CA event
            </summary>
        </member>
        <member name="F:OSCA.Log.LogEvent.EventType.StopCA">
            <summary>
            Stop CA event
            </summary>
        </member>
        <member name="F:OSCA.Log.LogEvent.EventType.IssueCert">
            <summary>
            Issue certificate event
            </summary>
        </member>
        <member name="F:OSCA.Log.LogEvent.EventType.RevokeCert">
            <summary>
            Revoke certificate event
            </summary>
        </member>
        <member name="F:OSCA.Log.LogEvent.EventType.CreateCRL">
            <summary>
            Create CRL event
            </summary>
        </member>
        <member name="F:OSCA.Log.LogEvent.EventType.ExpireCert">
            <summary>
            Expire certificate event
            </summary>
        </member>
        <member name="F:OSCA.Log.LogEvent.EventType.BackupCAKey">
            <summary>
            Backup CA key event
            </summary>
        </member>
        <member name="F:OSCA.Log.LogEvent.EventType.DBAddCert">
            <summary>
            Add certificate to database event
            </summary>
        </member>
        <member name="F:OSCA.Log.LogEvent.EventType.Error">
            <summary>
            Generic error event
            </summary>
        </member>
        <member name="F:OSCA.Log.LogEvent.EventType.Warning">
            <summary>
            Generic warning event
            </summary>
        </member>
        <member name="T:OSCA.Crypto.X509.CertificatePolicies">
            <summary>
            X.509 certificatePolicies extension
            </summary>
        </member>
        <member name="F:OSCA.Crypto.X509.CertificatePolicies.anyPolicy">
            <summary>
            Any policy OID
            </summary>
        </member>
        <member name="M:OSCA.Crypto.X509.CertificatePolicies.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
            <summary>
            Get the instance of the certificate policies
            </summary>
            <param name="obj">ASN.1 data</param>
            <param name="explicitly">Explicit encoding</param>
            <returns>CertificatePolicies instance</returns>
        </member>
        <member name="M:OSCA.Crypto.X509.CertificatePolicies.GetInstance(System.Object)">
            <summary>
            Get the instance of the certificate policies
            </summary>
            <param name="obj">CertificatePolicies instance</param>
            <returns>An instance of the CertificatePolicies class</returns>
            <exception cref="T:System.ArgumentException">Unknown object in factory</exception>
        </member>
        <member name="M:OSCA.Crypto.X509.CertificatePolicies.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence)">
            <summary>
            Add a policy to the list
            </summary>
            <param name="seq">Policy information</param>
        </member>
        <member name="M:OSCA.Crypto.X509.CertificatePolicies.#ctor(Org.BouncyCastle.Asn1.X509.PolicyInformation[])">
            <summary>
            Add a policy to the list
            </summary>
            <param name="p">Policy information</param>
        </member>
        <member name="M:OSCA.Crypto.X509.CertificatePolicies.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
            <summary>
            Add a policy to the list
            </summary>
            <param name="p">Policy information</param>
        </member>
        <member name="M:OSCA.Crypto.X509.CertificatePolicies.#ctor(System.String)">
            <summary>
            Add a plicy to the list
            </summary>
            <param name="p">Policy information</param>
        </member>
        <member name="M:OSCA.Crypto.X509.CertificatePolicies.AddPolicy(System.String)">
            <summary>
            Add a policy to the list
            </summary>
            <param name="p">Policy information</param>
        </member>
        <member name="M:OSCA.Crypto.X509.CertificatePolicies.AddPolicy(Org.BouncyCastle.Asn1.X509.PolicyInformation)">
            <summary>
            Add a policy to the list
            </summary>
            <param name="p">Policy information</param>
        </member>
        <member name="M:OSCA.Crypto.X509.CertificatePolicies.GetPolicyInformation">
            <summary>
            Get the policy information
            </summary>
            <returns>Array of PolicyInformation</returns>
        </member>
        <member name="M:OSCA.Crypto.X509.CertificatePolicies.GetPolicy(System.Int32)">
            <summary>
            Get policy number nr
            </summary>
            <param name="nr">Index number</param>
            <returns></returns>
        </member>
        <member name="M:OSCA.Crypto.X509.CertificatePolicies.ToAsn1Object">
            <summary>
            certificatePolicies as an Asn1Object
            </summary>
            <returns>Asn1Object representation</returns>
        </member>
        <member name="M:OSCA.Crypto.X509.CertificatePolicies.ToString">
            <summary>
            certificatePolicies information as a string
            </summary>
            <returns>String containing certificate policies</returns>
        </member>
        <member name="T:OSCA.Crypto.AlgorithmOids">
            <summary>
            OIDs for cryptographic algorithms
            </summary>
        </member>
        <member name="F:OSCA.Crypto.AlgorithmOids.algorithms">
            <summary>
            The algorithms
            </summary>
        </member>
        <member name="F:OSCA.Crypto.AlgorithmOids.exParams">
            <summary>
            The ex parameters
            </summary>
        </member>
        <member name="F:OSCA.Crypto.AlgorithmOids.keyAlgorithms">
            <summary>
            The key algorithms
            </summary>
        </member>
        <member name="F:OSCA.Crypto.AlgorithmOids.oids">
            <summary>
            The oids
            </summary>
        </member>
        <member name="F:OSCA.Crypto.AlgorithmOids.noParams">
            <summary>
            The no parameters
            </summary>
        </member>
        <member name="M:OSCA.Crypto.AlgorithmOids.#cctor">
            <summary>
            OIDs for cryptographic albums
            </summary>
        </member>
        <member name="T:OSCA.Profile.subjectAltName">
             <summary>
             Subject Alternative Names extension
             </summary>
             <remarks>
             ASN.1 description from RFC 5280:
             <code>
             id-ce-subjectAltName OBJECT IDENTIFIER ::=  { id-ce 17 }
             
             SubjectAltName ::= GeneralNames
            
             GeneralNames ::= SEQUENCE SIZE (1..MAX) OF GeneralName
             
             GeneralName ::= CHOICE {
                 otherName                       [0]     OtherName,
                 rfc822Name                      [1]     IA5String,
                 dNSName                         [2]     IA5String,
                 x400Address                     [3]     ORAddress,
                 directoryName                   [4]     Name,
                 ediPartyName                    [5]     EDIPartyName,
                 uniformResourceIdentifier       [6]     IA5String,
                 iPAddress                       [7]     OCTET STRING,
                 registeredID                    [8]     OBJECT IDENTIFIER }
                 
             OtherName ::= SEQUENCE {
                 type-id    OBJECT IDENTIFIER,
                 value      [0] EXPLICIT ANY DEFINED BY type-id }
                 
             EDIPartyName ::= SEQUENCE {
                 nameAssigner            [0]     DirectoryString OPTIONAL,
                 partyName               [1]     DirectoryString }
             </code> 
             </remarks>
        </member>
        <member name="T:OSCA.Profile.AlternativeName">
             <summary>
             Abstract base class for Alternative Names extensions
             <remarks>
             ASN.1 description from RFC 5280:
             <code>
             id-ce-subjectAltName OBJECT IDENTIFIER ::=  { id-ce 17 }
             
             SubjectAltName ::= GeneralNames
             
             id-ce-issuerAltName OBJECT IDENTIFIER ::=  { id-ce 18 }
             
             IssuerAltName ::= GeneralNames
            
             GeneralNames ::= SEQUENCE SIZE (1..MAX) OF GeneralName
             
             GeneralName ::= CHOICE {
                 otherName                       [0]     OtherName,
                 rfc822Name                      [1]     IA5String,
                 dNSName                         [2]     IA5String,
                 x400Address                     [3]     ORAddress,
                 directoryName                   [4]     Name,
                 ediPartyName                    [5]     EDIPartyName,
                 uniformResourceIdentifier       [6]     IA5String,
                 iPAddress                       [7]     OCTET STRING,
                 registeredID                    [8]     OBJECT IDENTIFIER }
                 
             OtherName ::= SEQUENCE {
                 type-id    OBJECT IDENTIFIER,
                 value      [0] EXPLICIT ANY DEFINED BY type-id }
                 
             EDIPartyName ::= SEQUENCE {
                 nameAssigner            [0]     DirectoryString OPTIONAL,
                 partyName               [1]     DirectoryString }
             </code> 
             </remarks>
             </summary>
        </member>
        <member name="F:OSCA.Profile.AlternativeName.genNames">
            <summary>
            The gen names
            </summary>
        </member>
        <member name="M:OSCA.Profile.AlternativeName.#ctor(System.Boolean)">
            <summary>
            Create extension using supplied values
            </summary>
            <param name="Critical">True = Critical, False = Not Critical</param>
        </member>
        <member name="M:OSCA.Profile.AlternativeName.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Create extension from XML profile file entry
            </summary>
            <remarks>
            Sample OSCA XML description of the SubjectAlternativeName extension:
            <code>
            &lt;Extension&gt;
                &lt;name displayName="Subject Alternative Name"&gt;SubjectAlternativeName&lt;/name&gt;
                &lt;critical&gt;false&lt;/critical&gt;
                &lt;value&gt;
                    &lt;altName type="rc822Name"&gt;peter@foo.com&lt;/altName&gt;
                    &lt;altName type="dNSName"&gt;peter.foo.com&lt;/altName&gt;
                &lt;/value&gt;
            &lt;/Extension&gt;
            </code>
            Note that either a SubjectAlternativeName or an IssuerAlternativeName is processed the same.
            </remarks>
            <param name="xml">XML version of the extension</param>
        </member>
        <member name="M:OSCA.Profile.AlternativeName.ToXml">
            <summary>
            Provide an XML version of the extension
            </summary>
            <remarks>
            Sample OSCA XML description of the SubjectAlternativeName extension:
            <code>
            &lt;Extension&gt;
                &lt;name displayName="Subject Alternative Name"&gt;SubjectAlternativeName&lt;/name&gt;
                &lt;critical&gt;false&lt;/critical&gt;
                &lt;value&gt;
                    &lt;altName type="rc822Name"&gt;peter@foo.com&lt;/altName&gt;
                    &lt;altName type="dNSName"&gt;peter.foo.com&lt;/altName&gt;
                &lt;/value&gt;
            &lt;/Extension&gt;
            </code>
            Note that either a SubjectAlternativeName or an IssuerAlternativeName is processed the same.
            </remarks>
            <returns>XML encoding of the extension</returns>
        </member>
        <member name="M:OSCA.Profile.AlternativeName.Add(OSCA.OSCAGeneralName)">
            <summary>
            Add a new Alt Name to the extension
            </summary>
            <param name="Name">The name.</param>
        </member>
        <member name="M:OSCA.Profile.AlternativeName.Remove(OSCA.OSCAGeneralName)">
            <summary>
            Remove an Alt Name from the extension
            </summary>
            <param name="Name">The name.</param>
        </member>
        <member name="M:OSCA.Profile.AlternativeName.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that describes this extension
            </summary>
            <returns>
            A <see cref="T:System.String"/> that describes this extension
            </returns>
        </member>
        <member name="M:OSCA.Profile.AlternativeName.encode">
            <summary>
            Encodes this instance.
            </summary>
        </member>
        <member name="M:OSCA.Profile.AlternativeName.decode(Org.BouncyCastle.Asn1.X509.GeneralNames)">
            <summary>
            Decodes the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:OSCA.Profile.AlternativeName.GeneralNames">
            <summary>
            DER encoded value of GeneralNames
            </summary>
        </member>
        <member name="P:OSCA.Profile.AlternativeName.DerEncoding">
            <summary>
            DER encoded value of extension
            </summary>
        </member>
        <member name="M:OSCA.Profile.subjectAltName.#ctor">
            <summary>
            Create a new SubjectAltName extension
            </summary>
        </member>
        <member name="M:OSCA.Profile.subjectAltName.#ctor(System.Boolean)">
            <summary>
            Create a new SubjectAltName extension
            </summary>
            <param name="critical">True if critical, else false</param>
        </member>
        <member name="M:OSCA.Profile.subjectAltName.#ctor(Org.BouncyCastle.Asn1.X509.X509Extension)">
            <summary>
            Create SubjectAltName extension from an X509Extension
            </summary>
            <param name="Extension">X509 extension</param>
            <remarks>
            Sub classses must provide an implementation to decode their values
            </remarks>
        </member>
        <member name="M:OSCA.Profile.subjectAltName.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Create a new SubjectAltName extension from an XML file
            </summary>
            <remarks>
            Sample OSCA XML description of the SubjectAlternativeName extension:
            <code>
            &lt;Extension&gt;
                &lt;name displayName="Subject Alternative Name"&gt;SubjectAlternativeName&lt;/name&gt;
                &lt;critical&gt;false&lt;/critical&gt;
                &lt;value&gt;
                    &lt;altName type="rc822Name"&gt;peter@foo.com&lt;/altName&gt;
                    &lt;altName type="dNSName"&gt;peter.foo.com&lt;/altName&gt;
                &lt;/value&gt;
            &lt;/Extension&gt;
            </code>
            </remarks>
            <param name="Xml">Xml node</param>
        </member>
        <member name="P:OSCA.Profile.subjectAltName.SubjAltNames">
            <summary>
            SubjectAltName settings
            </summary>
        </member>
        <member name="T:OSCA.Profile.Profile">
            <summary>
            Class describing an OSCA profile
            </summary>
        </member>
        <member name="F:OSCA.Profile.Profile.OSCAExtensions">
            <summary>
            X509 extensions supported by OSCA
            </summary>
            <remarks>A subset of the PKIX extensions and known private extensions</remarks>
        </member>
        <member name="F:OSCA.Profile.Profile.extensions">
            <summary>
            The extensions
            </summary>
        </member>
        <member name="M:OSCA.Profile.Profile.#ctor">
            <summary>
            Create an empty profile instance
            </summary>
        </member>
        <member name="M:OSCA.Profile.Profile.#ctor(Org.BouncyCastle.Asn1.X509.X509Extensions)">
            <summary>
            Create a Profile instance from an X509Extensions object
            </summary>
            <param name="Extensions">X509Extensions object</param>
        </member>
        <member name="M:OSCA.Profile.Profile.#ctor(System.String)">
            <summary>
            Create a Profile instance from an OSCA XML profile file
            </summary>
            <param name="ProfileFile">Pathname of profile file</param>
            <exception cref="T:System.ArgumentException">If file does not exist</exception>
            <remarks>
            Generic layout of an OSCA XML profile description:
            <code>
            &lt;?xml version="1.0" encoding="UTF-8" standalone="true"?&gt;
            &lt;OSCA version="2.1"&gt;
              &lt;Profile&gt;&gt;
                &lt;name&gt;Profile Name&lt;/name&gt;
                &lt;version&gt;1.0&lt;/version&gt;
                &lt;description&gt;Profile description&lt;/description&gt;
                &lt;lifetime units="Years"&gt;1&lt;/lifetime&gt;
                &lt;renewOverlap units="Months"&gt;1&lt;/renewOverlap&gt;
                &lt;Extensions&gt;
                  ...
                &lt;/Extensions&gt;
              &lt;/Profile&gt;
            &lt;/OSCA&gt;
            </code>
            </remarks>
        </member>
        <member name="M:OSCA.Profile.Profile.#ctor(System.Xml.Linq.XDocument)">
            <summary>
            Create a Profile instance from an XML Document
            </summary>
            <param name="Profile">XDocument containing profile</param>
        </member>
        <member name="M:OSCA.Profile.Profile.AddExtension(OSCA.Profile.ProfileExtension)">
            <summary>
            Adds an extension to the profile
            </summary>
            <param name="Extension">The extension to add.</param>
            <exception cref="T:System.ArgumentException">Duplicate extension entry</exception>
        </member>
        <member name="M:OSCA.Profile.Profile.RemoveExtension(OSCA.Profile.ProfileExtension)">
            <summary>
            Removes an extension.
            </summary>
            <param name="Extension">The extension to remove.</param>
        </member>
        <member name="M:OSCA.Profile.Profile.loadProfile(System.Xml.Linq.XDocument)">
            <summary>
            Loads the profile.
            </summary>
            <param name="profile">The profile.</param>
        </member>
        <member name="M:OSCA.Profile.Profile.ToXml">
            <summary>
            Generate a XML description of the profile
            </summary>
            <returns>XML description as an XDocument</returns>
            <remarks>
            Generic layout of an OSCA XML profile description:
            <code>
            &lt;?xml version="1.0" encoding="UTF-8" standalone="true"?&gt;
            &lt;OSCA version="2.1"&gt;
              &lt;Profile>&gt;
                &lt;name&gt;Profile Name&lt;/name&gt;
                &lt;version&gt;1.0&lt;/version&gt;
                &lt;description&gt;Profile description&lt;/description&gt;
                &lt;lifetime units="Years"&gt;1&lt;/lifetime&gt;
                &lt;renewOverlap units="Months"&gt;1&lt;/renewOverlap&gt;
                &lt;Extensions&gt;
                  ...
                &lt;/Extensions&gt;
              &lt;/Profile&gt;
            &lt;/OSCA&gt;
            </code>
            </remarks>
        </member>
        <member name="M:OSCA.Profile.Profile.SaveXml(System.String)">
            <summary>
            Save a profile to an XML file
            </summary>
            <param name="Folder">Folder to save into</param>
        </member>
        <member name="M:OSCA.Profile.Profile.FromPkcs10Request(Org.BouncyCastle.Pkcs.Pkcs10CertificationRequest)">
            <summary>
            Create an OSCA Profile using a PKCS#10 Certificate Request
            </summary>
            <param name="Request">PKCS#10 Certificate Request</param>
            <returns></returns>
        </member>
        <member name="M:OSCA.Profile.Profile.FromX509Certificate(Org.BouncyCastle.X509.X509Certificate)">
            <summary>
            Create an OSCA Profile using an X509 Certificate
            </summary>
            <param name="Certificate">X509 Certificate</param>
            <returns></returns>
        </member>
        <member name="P:OSCA.Profile.Profile.Name">
            <summary>
            Name of the profile
            </summary>
        </member>
        <member name="P:OSCA.Profile.Profile.Version">
            <summary>
            Version of the profile
            </summary>
        </member>
        <member name="P:OSCA.Profile.Profile.Description">
            <summary>
            Description of profile
            </summary>
        </member>
        <member name="P:OSCA.Profile.Profile.CertificateLifetime">
            <summary>
            Gets or sets the certificate lifetime.
            </summary>
            <value>
            The certificate lifetime.
            </value>
        </member>
        <member name="P:OSCA.Profile.Profile.RenewOverlapPeriod">
            <summary>
            Gets or sets the renewal overlap period.
            </summary>
            <value>
            The renew overlap period.
            </value>
        </member>
        <member name="P:OSCA.Profile.Profile.Extensions">
            <summary>
            Read-only list of extensions
            </summary>
            <remarks>To change the list use the Add/Remove methods</remarks>
        </member>
        <member name="M:OSCA.Policy.PolicyEnforcementFactory.initialise(Org.BouncyCastle.X509.X509Certificate,System.Xml.Linq.XElement)">
            <summary>
            Build a list of PolicyEnforcement modules.
            <para>Some policies are set by the issuing CA others are set by the CA manager</para>
            </summary>
            <param name="caCert">CA certificate</param>
            <param name="policyEnforcement">The policy enforcement.</param>
            <returns>
            List of PolicyEnforcement modules
            </returns>
        </member>
        <member name="T:OSCA.Profile.policyConstraints">
            <summary>
            Policy Constraints extension
            </summary>
            <remarks>
            ASN.1 description from RFC5280:
            <code>
               id-ce-policyConstraints OBJECT IDENTIFIER ::=  { id-ce 36 }
               
               PolicyConstraints ::= SEQUENCE {
                   requireExplicitPolicy           [0] SkipCerts OPTIONAL,
                   inhibitPolicyMapping            [1] SkipCerts OPTIONAL }
                   
               SkipCerts ::= INTEGER (0..MAX)
            </code>
            </remarks>
        </member>
        <member name="M:OSCA.Profile.policyConstraints.#ctor">
            <summary>
            Create PolicyConstraints extension
            </summary>
        </member>
        <member name="M:OSCA.Profile.policyConstraints.#ctor(System.Boolean)">
            <summary>
            Create PolicyConstraints extension
            </summary>
            <param name="Critical">True = Critical, False = Not Critical</param>
        </member>
        <member name="M:OSCA.Profile.policyConstraints.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Create PolicyConstraints extension from an OSCA XML extension description
            </summary>
            <remarks>Sample OSCA XML description of the PolicyConstraints extension:
            <code>
             &lt;Extension&gt;
               &lt;name description="Policy Constraints"&gt;PolicyConstraints&lt;/name&gt;
               &lt;critical&gt;false&lt;/critical&gt;
               &lt;value&gt;
                 &lt;requireExplicitPolicy&gt;0&lt;/requireExplicitPolicy&gt;
                 &lt;inhibitPolicyMaping&gt;1&lt;/inhibitPolicyMapping&gt;
               &lt;/value&gt;
             &lt;/Extension&gt;
            </code> 
            </remarks>
            <param name="xml">OSCA XML extension description</param>
        </member>
        <member name="M:OSCA.Profile.policyConstraints.#ctor(Org.BouncyCastle.Asn1.X509.X509Extension)">
            <summary>
            Create PolicyConstraints extension from an X509Extension
            </summary>
            <param name="Extension">X509Extension</param>
        </member>
        <member name="M:OSCA.Profile.policyConstraints.ToXml">
            <summary>
            Provide an OSCA XML description of the extension
            </summary>
            <remarks>Sample OSCA XML description of the PolicyConstraints extension:
            <code>
             &lt;Extension&gt;
               &lt;name description="Policy Constraints"&gt;PolicyConstraints&lt;/name&gt;
               &lt;critical&gt;false&lt;/critical&gt;
               &lt;value&gt;
                 &lt;requireExplicitPolicy&gt;0&lt;/requireExplicitPolicy&gt;
                 &lt;inhibitPolicyMaping&gt;1&lt;/inhibitPolicyMapping&gt;
               &lt;/value&gt;
             &lt;/Extension&gt;
            </code> 
            </remarks>
            <returns>OSCA XML extension description</returns>
        </member>
        <member name="M:OSCA.Profile.policyConstraints.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that describes this extension
            </summary>
            <returns>
            A <see cref="T:System.String"/> that describes this extension
            </returns>
        </member>
        <member name="P:OSCA.Profile.policyConstraints.RequireExplicitPolicy">
            <summary>
            Get/Set the constraint type;
            </summary>
            <remarks>Value is Skip Certs (-1 = disable)</remarks>
        </member>
        <member name="P:OSCA.Profile.policyConstraints.InhibitPolicyMapping">
            <summary>
            Get/Set the constraint type;
            </summary>
            <remarks>Value is Skip Certs (-1 = disable)</remarks>
        </member>
        <member name="P:OSCA.Profile.policyConstraints.PolicyConstraint">
            <summary>
            DER encoded value of PolicyConstraints
            </summary>
        </member>
        <member name="P:OSCA.Profile.policyConstraints.DerEncoding">
            <summary>
            DER encoded value of extension
            </summary>
        </member>
        <member name="T:OSCA.Profile.AccessDesc">
            <summary>
            OSCA Access Description
            </summary>
        </member>
        <member name="F:OSCA.Profile.AccessDesc.Method">
            <summary>
            Access method
            </summary>
        </member>
        <member name="F:OSCA.Profile.AccessDesc.Location">
            <summary>
            Access location
            </summary>
        </member>
        <member name="T:OSCA.Profile.AccessMethod">
            <summary>
            Access methods
            <remarks>
            This enum defines the Access Methods available in AIA and SIA extensions
            </remarks>
            </summary>
        </member>
        <member name="F:OSCA.Profile.AccessMethod.CAIssuers">
            <summary>
            CA Issuers
            </summary>
        </member>
        <member name="F:OSCA.Profile.AccessMethod.Ocsp">
            <summary>
            OCSP
            </summary>
        </member>
        <member name="F:OSCA.Profile.AccessMethod.CARepository">
            <summary>
            CA Repository
            </summary>
        </member>
        <member name="F:OSCA.Profile.AccessMethod.TimeStamping">
            <summary>
            Time stamping
            </summary>
        </member>
        <member name="T:OSCA.Profile.InformationAccess">
            <summary>
            Abstract base class for Information Access extensions
            </summary>
        </member>
        <member name="F:OSCA.Profile.InformationAccess.encodedValue">
            <summary>
            The encoded value
            </summary>
        </member>
        <member name="F:OSCA.Profile.InformationAccess.accessDesc">
            <summary>
            The access desc
            </summary>
        </member>
        <member name="M:OSCA.Profile.InformationAccess.#ctor">
            <summary>
            Create extension
            </summary>
        </member>
        <member name="M:OSCA.Profile.InformationAccess.#ctor(System.Boolean)">
            <summary>
            Create extension using supplied values
            </summary>
            <param name="Critical">True = Critical, False = Not Critical</param>
        </member>
        <member name="M:OSCA.Profile.InformationAccess.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Create extension from XML profile file entry
            </summary>
            <param name="xml">XML version of the extension</param>
        </member>
        <member name="M:OSCA.Profile.InformationAccess.ToXml">
            <summary>
            Provide an XML version of the extension
            </summary>
            <returns>XML encoding of the extension</returns>
        </member>
        <member name="M:OSCA.Profile.InformationAccess.Add(OSCA.Profile.AccessDesc)">
            <summary>
            Add a new AccessDescription Name to the extension
            </summary>
            <param name="Descr">Access description.</param>
        </member>
        <member name="M:OSCA.Profile.InformationAccess.Remove(OSCA.Profile.AccessDesc)">
            <summary>
            Remove an AccessDescription Name from the extension
            </summary>
            <param name="Descr">Access description.</param>
        </member>
        <member name="M:OSCA.Profile.InformationAccess.encode">
            <summary>
            Encodes this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSCA.Profile.InformationAccess.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that describes this extension
            </summary>
            <returns>
            A <see cref="T:System.String"/> that describes this extension
            </returns>
        </member>
        <member name="M:OSCA.Profile.InformationAccess.decode(Org.BouncyCastle.Asn1.X509.AccessDescription[])">
            <summary>
            Decodes the specified value.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="P:OSCA.Profile.InformationAccess.DerEncoding">
            <summary>
            DER encoded value of extension
            </summary>
        </member>
        <member name="T:OSCA.Offline.simpleCA">
            <summary>
            A basic implementation of a Certification Authority
            </summary>
        </member>
        <member name="F:OSCA.Offline.simpleCA.configFile">
            <summary>
            The configuration file
            </summary>
        </member>
        <member name="F:OSCA.Offline.simpleCA.password">
            <summary>
            The password
            </summary>
        </member>
        <member name="F:OSCA.Offline.simpleCA.name">
            <summary>
            The name
            </summary>
        </member>
        <member name="F:OSCA.Offline.simpleCA.type">
            <summary>
            The type
            </summary>
        </member>
        <member name="F:OSCA.Offline.simpleCA.dbFileLocation">
            <summary>
            The database file location
            </summary>
        </member>
        <member name="F:OSCA.Offline.simpleCA.profilesLocation">
            <summary>
            The profiles location
            </summary>
        </member>
        <member name="F:OSCA.Offline.simpleCA.publicKeyAlgorithm">
            <summary>
            The public key algorithm
            </summary>
        </member>
        <member name="F:OSCA.Offline.simpleCA.publicKeySize">
            <summary>
            The public key size
            </summary>
        </member>
        <member name="F:OSCA.Offline.simpleCA.signatureAlgorithm">
            <summary>
            The signature algorithm
            </summary>
        </member>
        <member name="F:OSCA.Offline.simpleCA.fips140">
            <summary>
            The fips140
            </summary>
        </member>
        <member name="F:OSCA.Offline.simpleCA.lastSerial">
            <summary>
            The last serial
            </summary>
        </member>
        <member name="F:OSCA.Offline.simpleCA.crlFileLocation">
            <summary>
            The CRL file location
            </summary>
        </member>
        <member name="F:OSCA.Offline.simpleCA.lastCRL">
            <summary>
            The last CRL
            </summary>
        </member>
        <member name="F:OSCA.Offline.simpleCA.crlInterval">
            <summary>
            The CRL interval
            </summary>
        </member>
        <member name="F:OSCA.Offline.simpleCA.caCertificate">
            <summary>
            The certificate
            </summary>
        </member>
        <member name="F:OSCA.Offline.simpleCA.cspParam">
            <summary>
            The CSP parameter
            </summary>
        </member>
        <member name="F:OSCA.Offline.simpleCA.policyEnforcement">
            <summary>
            The policy enforcement
            </summary>
        </member>
        <member name="F:OSCA.Offline.simpleCA.eventLog">
            <summary>
            The event log
            </summary>
        </member>
        <member name="M:OSCA.Offline.simpleCA.#ctor(System.String,System.String)">
            <summary>
            Construct a CA object
            </summary>
            <param name="ConfigFile">Full pathname to config file</param>
            <param name="Password">Password for key file</param>
        </member>
        <member name="M:OSCA.Offline.simpleCA.#ctor">
            <summary>
            Stub constructor to support inheritance
            </summary>
        </member>
        <member name="M:OSCA.Offline.simpleCA.generate(OSCA.Crypto.ICertGen,OSCA.Profile.Profile,System.DateTime,System.DateTime)">
            <summary>
            Generates the certificate.
            </summary>
            <param name="gen">The generator.</param>
            <param name="profile">The profile.</param>
            <param name="notBefore">The not before.</param>
            <param name="notAfter">The not after.</param>
            <returns></returns>
        </member>
        <member name="M:OSCA.Offline.simpleCA.generate(OSCA.Crypto.ICertGen)">
            <summary>
            Generates the certificate.
            </summary>
            <param name="gen">The generator.</param>
            <returns></returns>
        </member>
        <member name="M:OSCA.Offline.simpleCA.generate(OSCA.Crypto.ICertGen,Org.BouncyCastle.Asn1.X509.X509Extensions)">
            <summary>
            Generates the certificate.
            </summary>
            <param name="gen">The generator.</param>
            <param name="ext">The extensions.</param>
            <returns></returns>
        </member>
        <member name="M:OSCA.Offline.simpleCA.checkCaCertValid(Org.BouncyCastle.X509.X509Certificate)">
            <summary>
            Checks the ca cert is valid.
            </summary>
            <param name="issuingCaCert">The issuing ca cert.</param>
            <returns>True if valid, false if not</returns>
        </member>
        <member name="M:OSCA.Offline.simpleCA.IssueCertificate(System.Byte[],OSCA.Profile.Profile)">
            <summary>
            Issue a certificate based on a PKCS#10 certificate request and OSCA profile
            </summary>
            <param name="Request">DER encoded PKCS#10 certificate request</param>
            <param name="Profile">OSCA Profile</param>
            <returns>
            Requested certificate
            </returns>
            <exception cref="T:System.Exception">Certificate issue failed</exception>
        </member>
        <member name="M:OSCA.Offline.simpleCA.IssueCertificate(System.Byte[],OSCA.ValidityPeriod)">
            <summary>
            Issue a certificate based on a PKCS#10 certificate request and validity period
            </summary>
            <param name="Request">DER encoded PKCS#10 certificate request</param>
            <param name="Validity">Validity period for certificate</param>
            <returns>Requested certificate</returns>
            <exception cref="T:System.ArgumentException">Invalid signature algorithm in request</exception>
        </member>
        <member name="M:OSCA.Offline.simpleCA.IssueCertificate(System.Byte[],OSCA.Profile.Profile,System.DateTime,System.DateTime)">
            <summary>
            Issues the certificate.
            </summary>
            <param name="Request">DER encoded PKCS#10 certificate request</param>
            <param name="Profile">A profile instance.</param>
            <param name="NotBefore">Not before date.</param>
            <param name="NotAfter">Not after date.</param>
            <returns></returns>
            <exception cref="T:System.Exception">Certificate issue failed</exception>
        </member>
        <member name="M:OSCA.Offline.simpleCA.IssueCertificate(Org.BouncyCastle.Pkcs.Pkcs10CertificationRequest,OSCA.Profile.Profile)">
            <summary>
            Issue a certificate based on a PKCS#10 certificate request object and OSCA profile
            </summary>
            <param name="Request">PKCS#10 certificate request</param>
            <param name="Profile">The profile.</param>
            <returns>
            Requested certificate
            </returns>
            <exception cref="T:System.Exception">Certificate issue failed</exception>
        </member>
        <member name="M:OSCA.Offline.simpleCA.IssueCertificate(Org.BouncyCastle.Pkcs.Pkcs10CertificationRequest,OSCA.ValidityPeriod)">
            <summary>
            Issue a certificate based on a PKCS#10 certificate request object and validity period
            </summary>
            <param name="Request">PKCS#10 certificate request</param>
            <param name="Validity">Validity period for certificate</param>
            <returns>Requested certificate</returns>
            <exception cref="T:System.ArgumentException">Invalid signature algorithm in request</exception>
        </member>
        <member name="M:OSCA.Offline.simpleCA.IssueCertificate(Org.BouncyCastle.Pkcs.Pkcs10CertificationRequest,OSCA.Profile.Profile,System.DateTime,System.DateTime)">
            <summary>
            Issue a certificate based on a PKCS#10 certificate request object, OSCA profile and notBefore/notAfter dates
            </summary>
            <param name="Request">PKCS#10 certificate request</param>
            <param name="Profile">The profile.</param>
            <param name="NotBefore">The not before.</param>
            <param name="NotAfter">The not after.</param>
            <returns>
            Requested certificate
            </returns>
            <exception cref="T:System.Exception">Certificate issue failed</exception>
            <remarks>
            This method is intended to support rekey.
            </remarks>
        </member>
        <member name="M:OSCA.Offline.simpleCA.issueCertificate(Org.BouncyCastle.Pkcs.Pkcs10CertificationRequest,OSCA.Profile.Profile,System.DateTime,System.DateTime)">
            <summary>
            Issues the certificate.
            </summary>
            <param name="request">The request.</param>
            <param name="profile">The profile</param>
            <param name="notBefore">The not before.</param>
            <param name="notAfter">The not after.</param>
            <returns>
            Certificate
            </returns>
            <exception cref="T:System.ArgumentException">Invalid signature algorithm in request</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Invalid lifetime units in ValidityPeriod</exception>
        </member>
        <member name="M:OSCA.Offline.simpleCA.RevokeCertificate(Org.BouncyCastle.X509.X509Certificate,OSCA.CRLReason)">
            <summary>
            Revoke a certificate
            </summary>
            <param name="Certificate">Certificate to revoke</param>
            <param name="Reason">Revocation reason</param>
            <returns>Status of the certificate</returns>
            <exception cref="T:System.ApplicationException">Certificate not found</exception>
            <exception cref="T:System.ApplicationException">Duplicate serial number</exception>
            <exception cref="T:System.ApplicationException">Certificate is already revoked</exception>
        </member>
        <member name="M:OSCA.Offline.simpleCA.UnRevokeCertificate(Org.BouncyCastle.X509.X509Certificate)">
            <summary>
            Unrevoke certificate. (unsuspend)
            </summary>
            <param name="Certificate">The certificate.</param>
            <returns></returns>
        </member>
        <member name="M:OSCA.Offline.simpleCA.IssueCRL">
            <summary>
            Issue a CRL (containing all revoked certificates)
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSCA.Offline.simpleCA.createCRL(Org.BouncyCastle.X509.X509V2CrlGenerator)">
            <summary>
            Creates a CRL.
            </summary>
            <param name="crlGen">The CRL generator.</param>
        </member>
        <member name="M:OSCA.Offline.simpleCA.GetCRL">
            <summary>
            Retrieve the current CRL
            </summary>
            <returns>The current CRL</returns>
        </member>
        <member name="M:OSCA.Offline.simpleCA.Backup(System.String,System.String)">
            <summary>
            Backup the CA key material to a PKCS#12 file
            </summary>
            <param name="Password">Strong password used for encryption</param>
            <param name="OutFile">Outut file</param>
        </member>
        <member name="M:OSCA.Offline.simpleCA.StopCA">
            <summary>
            Writes a 'CA Stopped' event to the log
            </summary>
        </member>
        <member name="P:OSCA.Offline.simpleCA.LastCRLNumber">
            <summary>
            Serial number of the last CRL issued
            </summary>
        </member>
        <member name="P:OSCA.Offline.simpleCA.LastSerialNumber">
            <summary>
            Serial number of the last certificate issued
            </summary>
        </member>
        <member name="P:OSCA.Offline.simpleCA.FIPS140Mode">
            <summary>
            True if this CA is in FIPS 140 mode
            </summary>
        </member>
        <member name="P:OSCA.Offline.simpleCA.Type">
            <summary>
            CA Type (Root or subCA)
            </summary>
        </member>
        <member name="P:OSCA.Offline.simpleCA.CAName">
            <summary>
            Distinguished Name of the CA
            </summary>
        </member>
        <member name="P:OSCA.Offline.simpleCA.PublicKeyAlgorithm">
            <summary>
            Algorithm for the CAs key-pair
            </summary>
        </member>
        <member name="P:OSCA.Offline.simpleCA.SignatureAlgorithm">
            <summary>
            Algorithm for the CAs signature
            </summary>
        </member>
        <member name="P:OSCA.Offline.simpleCA.Certificate">
            <summary>
            CA certificate
            </summary>
        </member>
        <member name="T:OSCA.Profile.keyUsage">
            <summary>
            Key Usage extension
            </summary>
            <remarks>
            ASN.1 description from RFC 5280:
            <code>
            id-ce-keyUsage OBJECT IDENTIFIER ::=  { id-ce 15 }
            
            KeyUsage ::= BIT STRING {
                digitalSignature        (0),
                nonRepudiation          (1),
                keyEncipherment         (2),
                dataEncipherment        (3),
                keyAgreement            (4),
                keyCertSign             (5),
                cRLSign                 (6),
                encipherOnly            (7),
                decipherOnly            (8) }
            </code>
            </remarks>
        </member>
        <member name="M:OSCA.Profile.keyUsage.#ctor">
            <summary>
            Create KeyUsage extension
            </summary>
        </member>
        <member name="M:OSCA.Profile.keyUsage.#ctor(System.Boolean)">
            <summary>
            Create KeyUsage extension
            </summary>
            <param name="Critical">True = Critical, False = Not Critical</param>
        </member>
        <member name="M:OSCA.Profile.keyUsage.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Create KeyUsage extension from XML profile file entry
            </summary>
            <remarks>
            Sample OSCA XML description of the KeyUsage extension:
            </remarks>
            <code>
            &lt;Extension&gt;
                &lt;name displayName="Key Usage"&gt;KeyUsage&lt;/name&gt;
                &lt;critical&gt;true&lt;/critical&gt;
                &lt;value&gt;
                    &lt;usage&gt;KeyCertSign&lt;/usage&gt;
                    &lt;usage&gt;CrlSign&lt;/usage&gt;
                &lt;/value&gt;
            &lt;/Extension&gt;
            </code>
            <param name="xml">XML version of the extension</param>
        </member>
        <member name="M:OSCA.Profile.keyUsage.#ctor(Org.BouncyCastle.Asn1.X509.X509Extension)">
            <summary>
            Create KeyUsage from an X509Extension
            </summary>
            <param name="Extension">X509 extension</param>
            <remarks>
            Sub classses must provide an implementation to decode their values
            </remarks>
        </member>
        <member name="M:OSCA.Profile.keyUsage.ToXml">
            <summary>
            Provide an XML version of the extension
            </summary>
            <remarks>
            Sample OSCA XML description of the KeyUsage extension:
            </remarks>
            <code>
            &lt;Extension&gt;
                &lt;name displayName="Key Usage"&gt;KeyUsage&lt;/name&gt;
                &lt;critical&gt;true&lt;/critical&gt;
                &lt;value&gt;
                    &lt;usage&gt;KeyCertSign&lt;/usage&gt;
                    &lt;usage&gt;CrlSign&lt;/usage&gt;
                &lt;/value&gt;
            &lt;/Extension&gt;
            </code>
            <returns>XML encoding of the extension</returns>
        </member>
        <member name="M:OSCA.Profile.keyUsage.Add(System.String)">
            <summary>
            Add a KeyUsage to the extension
            </summary>
            <param name="usage">Key Usage</param>
        </member>
        <member name="M:OSCA.Profile.keyUsage.Remove(System.String)">
            <summary>
            Remove a KeyUsage from the extension
            </summary>
            <param name="usage">Key Usage</param>
        </member>
        <member name="M:OSCA.Profile.keyUsage.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that describes this extension
            </summary>
            <returns>
            A <see cref="T:System.String"/> that describes this extension
            </returns>
        </member>
        <member name="P:OSCA.Profile.keyUsage.KeyUsages">
            <summary>
            Textual list of possible KeyUsages
            </summary>
        </member>
        <member name="P:OSCA.Profile.keyUsage.Kusage">
            <summary>
            KeyUsage settings
            </summary>
        </member>
        <member name="P:OSCA.Profile.keyUsage.KeyUsage">
            <summary>
            DER encoded value of KeyUsage
            </summary>
        </member>
        <member name="P:OSCA.Profile.keyUsage.DerEncoding">
            <summary>
            DER encoded value of extension
            </summary>
        </member>
        <member name="T:OSCA.Profile.inhibitAnyPolicy">
            <summary>
            Inhibit Any Policy extension
            </summary>
            <remarks>ASN.1 description from RFC 5280:
            <code>
            id-ce-inhibitAnyPolicy OBJECT IDENTIFIER ::=  { id-ce 54 }
            
            InhibitAnyPolicy ::= SkipCerts
            
            SkipCerts ::= INTEGER (0..MAX)
            </code>
            </remarks>
        </member>
        <member name="M:OSCA.Profile.inhibitAnyPolicy.#ctor">
            <summary>
            Create InhibitAnyPolicy extension
            </summary>
        </member>
        <member name="M:OSCA.Profile.inhibitAnyPolicy.#ctor(System.Boolean)">
            <summary>
            Create InhibitAnyPolicy extension
            </summary>
            <param name="Critical">True = Critical, False = Not Critical</param>
        </member>
        <member name="M:OSCA.Profile.inhibitAnyPolicy.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Create InhibitAnyPolicy extension from XML profile file entry
            </summary>
            <remarks>
            Sample XML description of the extension:
            <code>
            &lt;Extension&gt;
                &lt;name description="Inhibit AnyPolicy"&gt;InhibitAnyPolicy&lt;/name&gt;
                &lt;critical&gt;true&lt;/critical&gt;
                &lt;value&gt;1&lt;/value&gt;
            &lt;/Extension&gt;
            </code>
            </remarks>
            <param name="xml">XML version of the extension</param>
        </member>
        <member name="M:OSCA.Profile.inhibitAnyPolicy.#ctor(Org.BouncyCastle.Asn1.X509.X509Extension)">
            <summary>
            Create InhibitAnyPolicy extension from X509Extension
            </summary>
            <param name="Extension">X509Extension</param>
        </member>
        <member name="M:OSCA.Profile.inhibitAnyPolicy.ToXml">
            <summary>
            Provide an XML version of the extension
            </summary>
            <remarks>
            Sample XML description of the extension:
            <code>
            &lt;Extension&gt;
                &lt;name description="Inhibit AnyPolicy"&gt;InhibitAnyPolicy&lt;/name&gt;
                &lt;critical&gt;true&lt;/critical&gt;
                &lt;value&gt;1&lt;/value&gt;
            &lt;/Extension&gt;
            </code>
            </remarks>
            <returns>XML encoding of the extension</returns>
        </member>
        <member name="M:OSCA.Profile.inhibitAnyPolicy.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that describes this extension
            </summary>
            <returns>
            A <see cref="T:System.String"/> that describes this extension
            </returns>
        </member>
        <member name="P:OSCA.Profile.inhibitAnyPolicy.Skip">
            <summary>
            Get/Set the skip value
            </summary>
        </member>
        <member name="P:OSCA.Profile.inhibitAnyPolicy.InhibitAnyPolicy">
            <summary>
            DER encoded value of InhibitAnyPolicy
            </summary>
        </member>
        <member name="P:OSCA.Profile.inhibitAnyPolicy.DerEncoding">
            <summary>
            DER encoded value of extension
            </summary>
        </member>
        <member name="T:OSCA.Profile.crlDistPoint">
            <summary>
            CRL Distribution Point extension
            </summary>
            <remarks>ASN.1 description from RFC 5280
            <code>
            id-ce-cRLDistributionPoints OBJECT IDENTIFIER ::=  { id-ce 31 }
            
            CRLDistributionPoints ::= SEQUENCE SIZE (1..MAX) OF DistributionPoint
            
            DistributionPoint ::= SEQUENCE {
                distributionPoint       [0]     DistributionPointName OPTIONAL,
                reasons                 [1]     ReasonFlags OPTIONAL,
                cRLIssuer               [2]     GeneralNames OPTIONAL }
                
            DistributionPointName ::= CHOICE {
                fullName                [0]     GeneralNames,
                nameRelativeToCRLIssuer [1]     RelativeDistinguishedName }
                
            ReasonFlags ::= BIT STRING {
                unused                  (0),
                keyCompromise           (1),
                cACompromise            (2),
                affiliationChanged      (3),
                superseded              (4),
                cessationOfOperation    (5),
                certificateHold         (6),
                privilegeWithdrawn      (7),
                aACompromise            (8) }
            </code>
            Note that this class does not support reasons or cRLIssuer in the DistributionPoint
            </remarks>
        </member>
        <member name="T:OSCA.Profile.DistributionPoints">
            <summary>
            Abstract base class for Distribution Points extensions
            </summary>
            <remarks>ASN.1 description from RFC 5280
            <code>
            id-ce-cRLDistributionPoints OBJECT IDENTIFIER ::=  { id-ce 31 }
            
            id-ce-freshestCRL OBJECT IDENTIFIER ::=  { id-ce 46 }
            
            FreshestCRL ::= CRLDistributionPoints
                
            CRLDistributionPoints ::= SEQUENCE SIZE (1..MAX) OF DistributionPoint
            
            DistributionPoint ::= SEQUENCE {
                distributionPoint       [0]     DistributionPointName OPTIONAL,
                reasons                 [1]     ReasonFlags OPTIONAL,
                cRLIssuer               [2]     GeneralNames OPTIONAL }
                
            DistributionPointName ::= CHOICE {
                fullName                [0]     GeneralNames,
                nameRelativeToCRLIssuer [1]     RelativeDistinguishedName }
                
            ReasonFlags ::= BIT STRING {
                unused                  (0),
                keyCompromise           (1),
                cACompromise            (2),
                affiliationChanged      (3),
                superseded              (4),
                cessationOfOperation    (5),
                certificateHold         (6),
                privilegeWithdrawn      (7),
                aACompromise            (8) }
            </code>
            Note that this class does not support reasons or cRLIssuer in the DistributionPoint
            </remarks>
        </member>
        <member name="F:OSCA.Profile.DistributionPoints.distPoints">
            <summary>
            The dist points
            </summary>
        </member>
        <member name="M:OSCA.Profile.DistributionPoints.#ctor(System.Boolean)">
            <summary>
            Create extension using supplied values
            </summary>
            <param name="Critical">True = Critical, False = Not Critical</param>
        </member>
        <member name="M:OSCA.Profile.DistributionPoints.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Create extension from XML profile file entry
            </summary>
            <remarks>
            Sample OSCA XML description of the FreshestCRL extension:
            <code>
            &lt;Extension&gt;
                &lt;name description="Freshest CRL"&gt;FreshestCRL&lt;/name&gt;
                &lt;critical&gt;true&lt;/critical&gt;
                &lt;value&gt;
                    &lt;cdp&gt;
                        &lt;name type="uniformResourceIdentifier"&gt;http://crl.foo.org/wotsit.crl&lt;/name&gt;
                    &lt;/cdp&gt;
                    &lt;cdp&gt;
                        &lt;name type="uniformResourceIdentifier"&gt;http://www.bar.org/wotsit.crl&lt;/name&gt;
                    &lt;/cdp&gt;
                &lt;/value&gt;
            &lt;/Extension&gt;
            </code>
            Note that FreshestCRL and CRLDistributionPoint are processed the same.
            </remarks>
            <param name="xml">XML version of the extension</param>
        </member>
        <member name="M:OSCA.Profile.DistributionPoints.ToXml">
            <summary>
            Provide an XML version of the extension
            </summary>
            <remarks>
            Sample OSCA XML description of the extension:
            <code>
            &lt;Extension&gt;
                &lt;name description="Freshest CRL"&gt;FreshestCRL&lt;/name&gt;
                &lt;critical&gt;true&lt;/critical&gt;
                &lt;value&gt;
                    &lt;cdp&gt;
                        &lt;name type="uniformResourceIdentifier"&gt;http://crl.foo.org/wotsit.crl&lt;/name&gt;
                    &lt;/cdp&gt;
                    &lt;cdp&gt;
                        &lt;name type="uniformResourceIdentifier"&gt;http://www.bar.org/wotsit.crl&lt;/name&gt;
                    &lt;/cdp&gt;
                &lt;/value&gt;
            &lt;/Extension&gt;
            </code>
            Note that FreshestCRL and CRLDistributionPoint are processed the same.
            </remarks>
            <returns>XML encoding of the extension</returns>
        </member>
        <member name="M:OSCA.Profile.DistributionPoints.Add(OSCA.OSCAGeneralName)">
            <summary>
            Add a new crlDistPoint to the extension
            </summary>
            <param name="Name"></param>
        </member>
        <member name="M:OSCA.Profile.DistributionPoints.Remove(OSCA.OSCAGeneralName)">
            <summary>
            Remove a crlDistPoint from the extension
            </summary>
            <param name="Name"></param>
        </member>
        <member name="M:OSCA.Profile.DistributionPoints.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that describes this extension
            </summary>
            <returns>
            A <see cref="T:System.String"/> that describes this extension
            </returns>
        </member>
        <member name="M:OSCA.Profile.DistributionPoints.encode">
            <summary>
            Create a Distribution Point list
            </summary>
            <returns>Distribution Point list</returns>
        </member>
        <member name="M:OSCA.Profile.DistributionPoints.decode(Org.BouncyCastle.Asn1.X509.DistributionPoint[])">
            <summary>
            Read a DistributionPoint list
            </summary>
            <param name="dps">DistributionPoint list</param>
        </member>
        <member name="P:OSCA.Profile.DistributionPoints.DistPoints">
            <summary>
            Gets the dist points.
            </summary>
            <value>
            The dist points.
            </value>
        </member>
        <member name="P:OSCA.Profile.DistributionPoints.GeneralNames">
            <summary>
            Distribution points
            </summary>
        </member>
        <member name="P:OSCA.Profile.DistributionPoints.DerEncoding">
            <summary>
            DER encoded value of extension
            </summary>
        </member>
        <member name="M:OSCA.Profile.crlDistPoint.#ctor">
            <summary>
            Create CrlDistPoint extension
            </summary>
        </member>
        <member name="M:OSCA.Profile.crlDistPoint.#ctor(System.Boolean)">
            <summary>
            Create CrlDistPoint extension using supplied values
            </summary>
            <param name="Critical">True = Critical, False = Not Critical</param>
        </member>
        <member name="M:OSCA.Profile.crlDistPoint.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Create CRLDistributionPoints extension from XML description
            </summary>
            <remarks>Sample OSCA XML description of the CDP extension:
            <code>
            &lt;Extension&gt;
                &lt;name description="CRL Distribution Points"&gt;CrlDistributionPoints&lt;/name&gt;
                &lt;critical&gt;true&lt;/critical&gt;
                &lt;value&gt;
                    &lt;cdp&gt;
                        &lt;name type="uniformResourceIdentifier"&gt;http://crl.foo.org/wotsit.crl&lt;/name&gt;
                    &lt;/cdp&gt;
                    &lt;cdp&gt;
                        &lt;name type="uniformResourceIdentifier"&gt;http://www.bar.org/wotsit.crl&lt;/name&gt;
                    &lt;/cdp&gt;
                &lt;/value&gt;
            &lt;/Extension&gt;
            </code>
            </remarks>
            <param name="xml">XML version of the extension</param>
        </member>
        <member name="M:OSCA.Profile.crlDistPoint.#ctor(Org.BouncyCastle.Asn1.X509.X509Extension)">
            <summary>
            Create CRLDistributionPoints extension from X509Extension
            </summary>
            <param name="Extension"></param>
        </member>
        <member name="P:OSCA.Profile.crlDistPoint.CrlDistributionPoint">
            <summary>
            DER encoded value of CrlDistPoint
            </summary>
        </member>
        <member name="P:OSCA.Profile.crlDistPoint.DerEncoding">
            <summary>
            DER encoded value of extension
            </summary>
        </member>
        <member name="T:OSCA.Profile.basicConstraints">
            <summary>
            Basic Constraints extension
            </summary>
            <remarks>
            ASN.1 description from RFC 5280
            <code>
            id-ce-basicConstraints OBJECT IDENTIFIER ::=  { id-ce 19 }
            
            BasicConstraints ::= SEQUENCE {
                cA                      BOOLEAN DEFAULT FALSE,
                pathLenConstraint       INTEGER (0..MAX) OPTIONAL }
            </code>
            </remarks>
        </member>
        <member name="M:OSCA.Profile.basicConstraints.#ctor">
            <summary>
            Create BasicConstraints extension
            </summary>
            <remarks>RFC 5280 states that CA should be false and non-critical by default</remarks>
        </member>
        <member name="M:OSCA.Profile.basicConstraints.#ctor(System.Boolean)">
            <summary>
            Create BasicConstraints extension
            </summary>
            <param name="Critical">True = Critical, False = Not Critical</param>
        </member>
        <member name="M:OSCA.Profile.basicConstraints.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Create BasicConstraints extension from XML profile file entry
            </summary>
            <remarks>
            Sample OSCA XML description of the BasicConstraints extension:
            <code>
            &lt;Extension&gt;
                &lt;name description="Basic Constraints"&gt;BasicConstraints&lt;/name&gt;
                &lt;critical&gt;true&lt;/critical&gt;
                &lt;value&gt;
                    &lt;ca&gt;true&lt;/ca&gt;
                    &lt;pathLen&gt;none&lt;/pathLen&gt;
                &lt;/value&gt;
            &lt;/Extension&gt;
            </code>
            </remarks>
            <param name="xml">XML version of the extension</param>
        </member>
        <member name="M:OSCA.Profile.basicConstraints.#ctor(Org.BouncyCastle.Asn1.X509.X509Extension)">
            <summary>
            Create BasicConstraints extension from an X509Extension
            </summary>
            <param name="Extension">X509 extension</param>
            <remarks>
            Sub classses must provide an implementation to decode their values
            </remarks>
        </member>
        <member name="M:OSCA.Profile.basicConstraints.ToXml">
            <summary>
            Provide an XML description of the extension
            </summary>
            <remarks>
            Sample OSCA XML description of the BasicConstraints extension:
            <code>
            &lt;Extension&gt;
                &lt;name description="Basic Constraints"&gt;BasicConstraints&lt;/name&gt;
                &lt;critical&gt;true&lt;/critical&gt;
                &lt;value&gt;
                    &lt;ca&gt;true&lt;/ca&gt;
                    &lt;pathLen&gt;none&lt;/pathLen&gt;
                &lt;/value&gt;
            &lt;/Extension&gt;
            </code>
            </remarks>
            <returns>XML encoding of the extension</returns>
        </member>
        <member name="M:OSCA.Profile.basicConstraints.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that describes this extension
            </summary>
            <returns>
            A <see cref="T:System.String"/> that describes this extension
            </returns>
        </member>
        <member name="P:OSCA.Profile.basicConstraints.IsCA">
            <summary>
            Constraint type
            </summary>
            <remarks>CA = true; Entity = false</remarks>
        </member>
        <member name="P:OSCA.Profile.basicConstraints.PathLength">
            <summary>
            Path length constraint
            </summary>
            <remarks>The value 'none' suppresses the PathLength constraint</remarks>
        </member>
        <member name="P:OSCA.Profile.basicConstraints.BasicConstraints">
            <summary>
            DER encoded value of BasicConstraints
            </summary>
        </member>
        <member name="P:OSCA.Profile.basicConstraints.DerEncoding">
            <summary>
            DER encoded value of extension
            </summary>
        </member>
        <member name="T:OSCA.Algorithms">
            <summary>
            Algorithm names and OIDs
            </summary>
        </member>
        <member name="F:OSCA.Algorithms.algorithms">
            <summary>
            The algorithms
            </summary>
        </member>
        <member name="F:OSCA.Algorithms.exParams">
            <summary>
            The ex parameters
            </summary>
        </member>
        <member name="F:OSCA.Algorithms.keyAlgorithms">
            <summary>
            The key algorithms
            </summary>
        </member>
        <member name="F:OSCA.Algorithms.oids">
            <summary>
            The oids
            </summary>
        </member>
        <member name="F:OSCA.Algorithms.noParams">
            <summary>
            The no parameters
            </summary>
        </member>
        <member name="T:OSCA.Profile.certTemplateName">
            <summary>
            Certificate Template Name extension (MS)
            </summary>
            <remarks>   
            Microsoft private Certificate Template Name extension. This identifies the certificate template.
            </remarks>
        </member>
        <member name="M:OSCA.Profile.certTemplateName.#ctor">
            <summary>
            Create CertTemplateInfo extension
            </summary>
        </member>
        <member name="M:OSCA.Profile.certTemplateName.#ctor(System.Boolean)">
            <summary>
            Create CertTemplateInfo extension
            </summary>
            <param name="Critical">True = Critical, False = Not Critical</param>
        </member>
        <member name="M:OSCA.Profile.certTemplateName.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Create CertTemplateInfo extension from XML profile file entry
            </summary>
            <param name="xml">OSCA XML description of the extension</param>
            <remarks>Sample OSCA XML description of the CertTemplateName extension:
            <code>
             &lt;Extension&gt;
               &lt;name description="Certificate Template Name"&gt;CertTemplateName&lt;/name&gt;
               &lt;critical&gt;false&lt;/critical&gt;
               &lt;value&gt;
                   &lt;template&gt;subCA&lt;/template&gt;
               &lt;/value&gt;
             &lt;/Extension&gt;
            </code>
            </remarks>
        </member>
        <member name="M:OSCA.Profile.certTemplateName.#ctor(Org.BouncyCastle.Asn1.X509.X509Extension)">
            <summary>
            Create CertTemplateInfo extension from X509Extension
            </summary>
            <param name="Extension">X509Extension instance</param>
        </member>
        <member name="M:OSCA.Profile.certTemplateName.ToXml">
            <summary>
            Provide an XML version of the extension
            </summary>
            <returns>XML encoding of the extension</returns>
            <remarks>Sample OSCA XML description of the CertTemplateName extension:
            <code>
             &lt;Extension&gt;
               &lt;name description="Certificate Template Name"&gt;CertTemplateName&lt;/name&gt;
               &lt;critical&gt;false&lt;/critical&gt;
               &lt;value&gt;
                   &lt;template&gt;subCA&lt;/template&gt;
               &lt;/value&gt;
             &lt;/Extension&gt;
            </code>
            </remarks>
        </member>
        <member name="M:OSCA.Profile.certTemplateName.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that describes this extension
            </summary>
            <returns>
            A <see cref="T:System.String"/> that describes this extension
            </returns>
        </member>
        <member name="M:OSCA.Profile.certTemplateName.encode">
            <summary>
            Encodes this instance.
            </summary>
        </member>
        <member name="P:OSCA.Profile.certTemplateName.CertTemplateName">
            <summary>
            DER encoded value of CertTemplateName
            </summary>
        </member>
        <member name="P:OSCA.Profile.certTemplateName.DerEncoding">
            <summary>
            DER encoded value of extension
            </summary>
        </member>
        <member name="P:OSCA.Profile.certTemplateName.TemplateName">
            <summary>
            Gets or sets the template name.
            </summary>
            <value>
            The template.
            </value>
        </member>
        <member name="T:OSCA.Crypto.X509.SubjectInformationAccess">
            <summary>
            Defines the SubjectInformationAccess extension
            This is an addition to the BC crypto library
            </summary>
        </member>
        <member name="F:OSCA.Crypto.X509.SubjectInformationAccess.descriptions">
            	 * The SubjectInformationAccess object.
                    id-pe-subjectInfoAccess OBJECT IDENTIFIER ::= { id-pe 11 }
            
                    SubjectInfoAccessSyntax  ::=
                       SEQUENCE SIZE (1..MAX) OF AccessDescription
            
                     AccessDescription  ::=  SEQUENCE {
                       accessMethod          OBJECT IDENTIFIER,
                       accessLocation        GeneralName  }
            
                    id-ad OBJECT IDENTIFIER ::= { id-pkix 48 }
            
                    id-ad-caRepository OBJECT IDENTIFIER ::= { id-ad 5 }
            
                    id-ad-timeStamping OBJECT IDENTIFIER ::= { id-ad 3 }
        </member>
        <member name="M:OSCA.Crypto.X509.SubjectInformationAccess.GetInstance(System.Object)">
            <summary>
            Gets the instance.
            </summary>
            <param name="obj">The object.</param>
            <returns>An instance of the SubjectInformationAccess class</returns>
            <exception cref="T:System.ArgumentException">unknown object in factory</exception>
        </member>
        <member name="M:OSCA.Crypto.X509.SubjectInformationAccess.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.X509.GeneralName)">
            <summary>
            Initializes a new instance of the <see cref="T:OSCA.Crypto.X509.SubjectInformationAccess"/> class.
            </summary>
            <param name="oid">The oid.</param>
            <param name="location">The location.</param>
        </member>
        <member name="M:OSCA.Crypto.X509.SubjectInformationAccess.#ctor(Org.BouncyCastle.Asn1.X509.AccessDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:OSCA.Crypto.X509.SubjectInformationAccess"/> class.
            </summary>
            <param name="description">The description.</param>
        </member>
        <member name="M:OSCA.Crypto.X509.SubjectInformationAccess.GetAccessDescriptions">
            <summary>
            Gets the access descriptions.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSCA.Crypto.X509.SubjectInformationAccess.ToAsn1Object">
            <summary>
            To the asn1 object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSCA.Crypto.X509.SubjectInformationAccess.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:OSCA.Crypto.CNG.Rfc4050KeyFormatter" -->
        <member name="M:OSCA.Crypto.CNG.Rfc4050KeyFormatter.FromXml(System.String)">
            <summary>
                Restore a key from XML
            </summary>
        </member>
        <member name="M:OSCA.Crypto.CNG.Rfc4050KeyFormatter.GetKeySize(System.String)">
            <summary>
                Map a curve URN to the size of the key associated with the curve
            </summary>
        </member>
        <member name="M:OSCA.Crypto.CNG.Rfc4050KeyFormatter.GetCurveUrn(System.Security.Cryptography.CngAlgorithm)">
            <summary>
                Get the OID which represents an elliptic curve
            </summary>
        </member>
        <member name="M:OSCA.Crypto.CNG.Rfc4050KeyFormatter.ReadAlgorithm(System.Xml.XPath.XPathNavigator)">
            <summary>
                Determine which ECC algorithm the key refers to
            </summary>
        </member>
        <member name="M:OSCA.Crypto.CNG.Rfc4050KeyFormatter.ReadPublicKey(System.Xml.XPath.XPathNavigator,System.Numerics.BigInteger@,System.Numerics.BigInteger@)">
            <summary>
                Read the x and y components of the public key
            </summary>
        </member>
        <member name="M:OSCA.Crypto.CNG.Rfc4050KeyFormatter.WriteDomainParameters(System.Xml.XmlWriter,System.Security.Cryptography.CngKey)">
            <summary>
                Serialize out information about the elliptic curve
            </summary>
        </member>
        <member name="M:OSCA.Crypto.CNG.Rfc4050KeyFormatter.ToXml(System.Security.Cryptography.CngKey)">
            <summary>
                Convert a key to XML
            </summary>
        </member>
        <member name="M:OSCA.Crypto.CNG.Rfc4050KeyFormatter.UnpackEccPublicBlob(System.Byte[],System.Numerics.BigInteger@,System.Numerics.BigInteger@)">
            <summary>
                Unpack a key blob in ECC public blob format into its X and Y parameters
            
                This method expects that the blob be in the correct format -- blobs accepted from partially
                trusted code need to be validated before being unpacked.
            </summary>
        </member>
        <member name="M:OSCA.Crypto.CNG.Rfc4050KeyFormatter.ReverseBytes(System.Byte[])">
            <summary>
                Reverse the bytes in a buffer
            </summary>
        </member>
        <member name="M:OSCA.Crypto.CNG.Rfc4050KeyFormatter.ReverseBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
                Reverse a section of bytes within a buffer
            </summary>
        </member>
        <member name="M:OSCA.Crypto.CNG.Rfc4050KeyFormatter.BuildEccPublicBlob(System.String,System.Numerics.BigInteger,System.Numerics.BigInteger)">
            <summary>
                Build an ECC public key blob to represent the given parameters
            </summary>
        </member>
        <member name="M:OSCA.Crypto.CNG.Rfc4050KeyFormatter.MapAlgorithmIdToMagic(System.String,OSCA.Crypto.CNG.Rfc4050KeyFormatter.KeyBlobMagicNumber@,System.Int32@)">
            <summary>
                Map an algorithm identifier to a key size and magic number
            </summary>
        </member>
        <member name="M:OSCA.Crypto.CNG.Rfc4050KeyFormatter.FillKeyParameter(System.Byte[],System.Int32)">
            <summary>
                Make sure that a key is padded out to be its full size
            </summary>
        </member>
        <member name="T:OSCA.Crypto.CNG.Rfc4050KeyFormatter.KeyBlobMagicNumber">
            <summary>
                Magic numbers identifying blob types
            </summary>
        </member>
        <member name="T:OSCA.Profile.certTemplateInfo">
            <summary>
            Certificate Template Information extension (MS)
            </summary>
            <remarks>   
            Microsoft private Certificate Template Information extension. This identifies the certificate template and version number.
            </remarks>
        </member>
        <member name="M:OSCA.Profile.certTemplateInfo.#ctor">
            <summary>
            Create CertTemplateInfo extension
            </summary>
        </member>
        <member name="M:OSCA.Profile.certTemplateInfo.#ctor(System.Boolean)">
            <summary>
            Create CertTemplateInfo extension
            </summary>
            <param name="Critical">True = Critical, False = Not Critical</param>
        </member>
        <member name="M:OSCA.Profile.certTemplateInfo.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Create CertTemplateInfo extension from XML profile file entry
            </summary>
            <param name="xml">OSCA XML description of the extension</param>
            <remarks>Sample OSCA XML description of the CertTemplateInfo extension:
            <code>
             &lt;Extension&gt;
               &lt;name description="Certificate Template Information"&gt;CertTemplateInfo&lt;/name&gt;
               &lt;critical&gt;false&lt;/critical&gt;
               &lt;value&gt;
                   &lt;template&gt;1.2.3.4.5.6&lt;/template&gt;
                   &lt;majorVersion&gt;1&lt;/majorVersion&gt;
                   &lt;minorVersion&gt;4&lt;/minorVersion&gt;
               &lt;/value&gt;
             &lt;/Extension&gt;
            </code> 
            </remarks>
        </member>
        <member name="M:OSCA.Profile.certTemplateInfo.#ctor(Org.BouncyCastle.Asn1.X509.X509Extension)">
            <summary>
            Create CertTemplateInfo extension from X509Extension
            </summary>
            <param name="Extension">X509Extension instance</param>
        </member>
        <member name="M:OSCA.Profile.certTemplateInfo.ToXml">
            <summary>
            Provide an XML version of the extension
            </summary>
            <returns>XML encoding of the extension</returns>
            <remarks>Sample OSCA XML description of the CertTemplateInfo extension:
            <code>
             &lt;Extension&gt;
               &lt;name description="Certificate Template Information"&gt;CertTemplateInfo&lt;/name&gt;
               &lt;critical&gt;false&lt;/critical&gt;
               &lt;value&gt;
                   &lt;template&gt;1.2.3.4.5.6&lt;/template&gt;
                   &lt;majorVersion&gt;1&lt;/majorVersion&gt;
                   &lt;minorVersion&gt;4&lt;/minorVersion&gt;
               &lt;/value&gt;
             &lt;/Extension&gt;
            </code>
            </remarks>
        </member>
        <member name="M:OSCA.Profile.certTemplateInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that describes this extension
            </summary>
            <returns>
            A <see cref="T:System.String"/> that describes this extension
            </returns>
        </member>
        <member name="M:OSCA.Profile.certTemplateInfo.encode">
            <summary>
            Encodes this instance.
            </summary>
        </member>
        <member name="P:OSCA.Profile.certTemplateInfo.CertTemplateInfo">
            <summary>
            DER encoded value of CertTemplateInfo
            </summary>
        </member>
        <member name="P:OSCA.Profile.certTemplateInfo.DerEncoding">
            <summary>
            DER encoded value of extension
            </summary>
        </member>
        <member name="P:OSCA.Profile.certTemplateInfo.Template">
            <summary>
            Gets or sets the template OID.
            </summary>
            <value>
            The template.
            </value>
        </member>
        <member name="P:OSCA.Profile.certTemplateInfo.MajorVersion">
            <summary>
            Gets or sets the major version.
            </summary>
            <value>
            The major version.
            </value>
        </member>
        <member name="P:OSCA.Profile.certTemplateInfo.MinorVersion">
            <summary>
            Gets or sets the minor version.
            </summary>
            <value>
            The minor version.
            </value>
        </member>
        <member name="M:OSCA.Profile.ProfileExtensionFactory.GetExtension(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.X509.X509Extension)">
            <summary>
            Return a ProfileExtension instance based on a passed-in X509Extension
            </summary>
            <param name="oid">OID of extension</param>
            <param name="extension">X509Extension</param>
            <returns>A ProfileExtension instance</returns>
        </member>
        <member name="M:OSCA.Profile.ProfileExtensionFactory.GetExtension(System.Xml.Linq.XElement)">
            <summary>
            Return a ProfileExtension instance based on a passed-in XML value
            </summary>
            <param name="extension">XElement containing extension</param>
            <returns>A ProfileExtension instance</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Throws exception if extension not recognised</exception>
        </member>
        <member name="T:OSCA.Profile.caVersion">
            <summary>
            CA Version extension (MS)
            </summary>
            <remarks>   
            Microsoft private CA Version extension. This refers to the version of the CA key and appears to be used to identify the correct CRL to use.
            </remarks>
        </member>
        <member name="M:OSCA.Profile.caVersion.#ctor">
            <summary>
            Create CaVersion extension
            </summary>
        </member>
        <member name="M:OSCA.Profile.caVersion.#ctor(System.Boolean)">
            <summary>
            Create CaVersion extension
            </summary>
            <param name="Critical">True = Critical, False = Not Critical</param>
        </member>
        <member name="M:OSCA.Profile.caVersion.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Create CaVersion extension from XML profile file entry
            </summary>
            <param name="xml">OSCA XML description of the extension</param>
            <remarks>Sample OSCA XML description of the CaVersion extension:
            <code>
             &lt;Extension&gt;
               &lt;name description="CA Version"&gt;CaVersion&lt;/name&gt;
               &lt;critical&gt;false&lt;/critical&gt;
               &lt;value&gt;
                   &lt;version&gt;0&lt;/version&gt;
               &lt;/value&gt;
             &lt;/Extension&gt;
            </code> 
            </remarks>
        </member>
        <member name="M:OSCA.Profile.caVersion.#ctor(Org.BouncyCastle.Asn1.X509.X509Extension)">
            <summary>
            Create CaVersion extension from X509Extension
            </summary>
            <param name="Extension">X509Extension instance</param>
        </member>
        <member name="M:OSCA.Profile.caVersion.ToXml">
            <summary>
            Provide an XML version of the extension
            </summary>
            <returns>XML encoding of the extension</returns>
            <remarks>Sample OSCA XML description of the CaVersion extension:
            <code>
             &lt;Extension&gt;
               &lt;name description="CA Version"&gt;CaVersion&lt;/name&gt;
               &lt;critical&gt;false&lt;/critical&gt;
               &lt;value&gt;
                   &lt;version&gt;0&lt;/version&gt;
               &lt;/value&gt;
             &lt;/Extension&gt;
            </code> 
            </remarks>
        </member>
        <member name="M:OSCA.Profile.caVersion.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that describes this extension
            </summary>
            <returns>
            A <see cref="T:System.String"/> that describes this extension
            </returns>
        </member>
        <member name="M:OSCA.Profile.caVersion.encode">
            <summary>
            Encodes this instance.
            </summary>
        </member>
        <member name="P:OSCA.Profile.caVersion.CAVersion">
            <summary>
            DER encoded value of CaVersion
            </summary>
        </member>
        <member name="P:OSCA.Profile.caVersion.DerEncoding">
            <summary>
            DER encoded value of extension
            </summary>
        </member>
        <member name="P:OSCA.Profile.caVersion.Version">
            <summary>
            CA Key number
            </summary>
        </member>
        <member name="T:OSCA.Crypto.V3CertGen">
            <summary>
            Abstract base class for V3 certificate generators
            </summary>
        </member>
        <member name="T:OSCA.Crypto.ICertGen">
            <summary>
            Interface to X509 Certificate Generators.
            </summary>
        </member>
        <member name="M:OSCA.Crypto.ICertGen.GetVersion">
            <summary>
            Gets the X509 version returned by the certificate generator
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSCA.Crypto.ICertGen.Reset">
            <summary>
            Reset the Generator.
            </summary>
        </member>
        <member name="M:OSCA.Crypto.ICertGen.SetSerialNumber(Org.BouncyCastle.Math.BigInteger)">
            <summary>
            Set the certificate's serial number.
            </summary>
            <remarks>Make serial numbers long, if you have no serial number policy make sure the number is at least 16 bytes of secure random data.
            You will be surprised how ugly a serial number collision can Get.</remarks>
            <param name="serialNumber">The serial number.</param>
        </member>
        <member name="M:OSCA.Crypto.ICertGen.SetIssuerDN(Org.BouncyCastle.Asn1.X509.X509Name)">
            <summary>
            Set the distinguished name of the issuer.
            The issuer is the entity which is signing the certificate.
            </summary>
            <param name="issuer">The issuer's DN.</param>
        </member>
        <member name="M:OSCA.Crypto.ICertGen.SetNotBefore(System.DateTime)">
            <summary>
            Set the date that this certificate is to be valid from.
            </summary>
            <param name="date"/>
        </member>
        <member name="M:OSCA.Crypto.ICertGen.SetNotAfter(System.DateTime)">
            <summary>
            Set the date after which this certificate will no longer be valid.
            </summary>
            <param name="date"/>
        </member>
        <member name="M:OSCA.Crypto.ICertGen.SetSubjectDN(Org.BouncyCastle.Asn1.X509.X509Name)">
            <summary>
            Set the DN of the entity that this certificate is about.
            </summary>
            <param name="subject"/>
        </member>
        <member name="M:OSCA.Crypto.ICertGen.SetPublicKey(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)">
            <summary>
            Set the public key that this certificate identifies.
            </summary>
            <param name="publicKey"/>
        </member>
        <member name="M:OSCA.Crypto.ICertGen.SetSignatureAlgorithm(System.String)">
            <summary>
            Set the signature algorithm that will be used to sign this certificate.
            </summary>
            <param name="signatureAlgorithm"/>
        </member>
        <member name="F:OSCA.Crypto.V3CertGen.extGenerator">
            <summary>
            The extensions generator
            </summary>
        </member>
        <member name="F:OSCA.Crypto.V3CertGen.tbsGen">
            <summary>
            The TBS gen
            </summary>
        </member>
        <member name="F:OSCA.Crypto.V3CertGen.sigOid">
            <summary>
            The sig oid
            </summary>
        </member>
        <member name="F:OSCA.Crypto.V3CertGen.sigAlgId">
            <summary>
            The sig alg identifier
            </summary>
        </member>
        <member name="F:OSCA.Crypto.V3CertGen.signatureAlgorithm">
            <summary>
            The signature algorithm
            </summary>
        </member>
        <member name="F:OSCA.Crypto.V3CertGen.policy">
            <summary>
            The policy
            </summary>
        </member>
        <member name="M:OSCA.Crypto.V3CertGen.#ctor">
            <summary>
            Called by derived classes to initializes a new instance.
            </summary>
        </member>
        <member name="M:OSCA.Crypto.V3CertGen.GetVersion">
            <summary>
            Return the X509 version this Certificate Generator will create.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSCA.Crypto.V3CertGen.Reset">
            <summary>
            Reset the Generator.
            </summary>
        </member>
        <member name="M:OSCA.Crypto.V3CertGen.SetSerialNumber(Org.BouncyCastle.Math.BigInteger)">
            <summary>
            Set the certificate's serial number.
            </summary>
            <remarks>Make serial numbers long, if you have no serial number policy make sure the number is at least 16 bytes of secure random data.
            You will be surprised how ugly a serial number collision can get.</remarks>
            <param name="serialNumber">The serial number.</param>
        </member>
        <member name="M:OSCA.Crypto.V3CertGen.SetIssuerDN(Org.BouncyCastle.Asn1.X509.X509Name)">
            <summary>
            Set the distinguished name of the issuer.
            The issuer is the entity which is signing the certificate.
            </summary>
            <param name="issuer">The issuer's DN.</param>
        </member>
        <member name="M:OSCA.Crypto.V3CertGen.SetNotBefore(System.DateTime)">
            <summary>
            Set the date that this certificate is to be valid from.
            </summary>
            <param name="Date">From date</param>
        </member>
        <member name="M:OSCA.Crypto.V3CertGen.SetNotAfter(System.DateTime)">
            <summary>
            Set the date after which this certificate will no longer be valid.
            </summary>
            <param name="Date">Expiry date</param>
        </member>
        <member name="M:OSCA.Crypto.V3CertGen.SetSubjectDN(Org.BouncyCastle.Asn1.X509.X509Name)">
            <summary>
            Set the DN of the entity that this certificate is about.
            </summary>
            <param name="Subject">Subject name</param>
        </member>
        <member name="M:OSCA.Crypto.V3CertGen.SetPublicKey(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)">
            <summary>
            Set the public key that this certificate identifies.
            </summary>
            <param name="publicKey"/>
        </member>
        <member name="M:OSCA.Crypto.V3CertGen.SetSignatureAlgorithm(System.String)">
            <summary>
            Set the signature algorithm that will be used to sign this certificate.
            </summary>
            <param name="signatureAlgorithm">Name of the signature algorithm</param>
        </member>
        <member name="M:OSCA.Crypto.V3CertGen.SetSubjectUniqueID(System.Boolean[])">
            <summary>
            Set the subject unique ID - note: it is very rare that it is correct to do this.
            </summary>
            <param name="uniqueID"/>
        </member>
        <member name="M:OSCA.Crypto.V3CertGen.SetIssuerUniqueID(System.Boolean[])">
            <summary>
            Set the issuer unique ID - note: it is very rare that it is correct to do this.
            </summary>
            <param name="uniqueID"/>
        </member>
        <member name="M:OSCA.Crypto.V3CertGen.AddExtension(System.String,System.Boolean,Org.BouncyCastle.Asn1.Asn1Encodable)">
            <summary>
            Add a given extension field for the standard extensions tag (tag 3).
            </summary>
            <param name="oid">string containing a dotted decimal Object Identifier.</param>
            <param name="critical">Is it critical.</param>
            <param name="extensionValue">The value.</param>
        </member>
        <member name="M:OSCA.Crypto.V3CertGen.AddExtension(Org.BouncyCastle.Asn1.DerObjectIdentifier,System.Boolean,Org.BouncyCastle.Asn1.Asn1Encodable)">
            <summary>
            Add an extension to this certificate.
            </summary>
            <param name="oid">Its Object Identifier.</param>
            <param name="critical">Is it critical.</param>
            <param name="extensionValue">The value.</param>
        </member>
        <member name="M:OSCA.Crypto.V3CertGen.AddExtension(System.String,System.Boolean,System.Byte[])">
            <summary>
            Add an extension using a string with a dotted decimal OID.
            </summary>
            <param name="oid">string containing a dotted decimal Object Identifier.</param>
            <param name="critical">Is it critical.</param>
            <param name="extensionValue">byte[] containing the value of this extension.</param>
        </member>
        <member name="M:OSCA.Crypto.V3CertGen.AddExtension(Org.BouncyCastle.Asn1.DerObjectIdentifier,System.Boolean,System.Byte[])">
            <summary>
            Add an extension to this certificate.
            </summary>
            <param name="oid">Its Object Identifier.</param>
            <param name="critical">Is it critical.</param>
            <param name="extensionValue">byte[] containing the value of this extension.</param>
        </member>
        <member name="M:OSCA.Crypto.V3CertGen.CopyAndAddExtension(System.String,System.Boolean,Org.BouncyCastle.X509.X509Certificate)">
            <summary>
            Add a given extension field for the standard extensions tag (tag 3),
            copying the extension value from another certificate.
            </summary>
        </member>
        <member name="M:OSCA.Crypto.V3CertGen.CopyAndAddExtension(Org.BouncyCastle.Asn1.DerObjectIdentifier,System.Boolean,Org.BouncyCastle.X509.X509Certificate)">
            add a given extension field for the standard extensions tag (tag 3)
            copying the extension value from another certificate.
            @throws CertificateParsingException if the extension cannot be extracted.
        </member>
        <member name="M:OSCA.Crypto.V3CertGen.GenerateTbsCert(Org.BouncyCastle.Asn1.X509.X509Extensions)">
            <summary>
            Generates the TBS cert.
            </summary>
            <param name="Extensions">The extensions.</param>
            <returns></returns>
        </member>
        <member name="P:OSCA.Crypto.V3CertGen.SignatureAlgNames">
            <summary>
            Allows enumeration of the signature names supported by the generator.
            </summary>
        </member>
        <member name="M:OSCA.Crypto.IbcCertGen.Generate(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)">
            <summary>
            Generate an X509Certificate.
            </summary>
            <param name="privateKey">The private key of the issuer that is signing this certificate.</param>
            <returns>An X509Certificate.</returns>
        </member>
        <member name="M:OSCA.Crypto.IbcCertGen.Generate(Org.BouncyCastle.Crypto.AsymmetricKeyParameter,Org.BouncyCastle.Asn1.X509.X509Extensions)">
            <summary>
            Generate an X509Certificate.
            </summary>
            <param name="privateKey">The private key of the issuer that is signing this certificate.</param>
            <param name="Extensions">Set of extensions to include in the certificate.</param>
            <returns>
            An X509Certificate.
            </returns>
        </member>
        <member name="M:OSCA.Crypto.IbcCertGen.Generate(Org.BouncyCastle.Crypto.AsymmetricKeyParameter,OSCA.Profile.Profile,System.DateTime,System.DateTime)">
            <summary>
            Generate an X509Certificate.
            </summary>
            <param name="privateKey">The private key of the issuer that is signing this certificate.</param>
            <param name="Profile">OSCA profile.</param>
            <param name="NotBefore">The notBefore date</param>
            <param name="NotAfter">The notAfter date</param>
            <returns>
            An X509Certificate.
            </returns>
        </member>
        <member name="T:OSCA.Crypto.BcV1CertGen">
            <summary>
            Class to Generate X509V1 Certificates using BC crypto
            </summary>
        </member>
        <member name="T:OSCA.Crypto.V1CertGen">
            <summary>
            Abstract class used to derive all V1 certificate generators
            </summary>
        </member>
        <member name="F:OSCA.Crypto.V1CertGen.tbsGen">
            <summary>
            The TBS gen
            </summary>
        </member>
        <member name="F:OSCA.Crypto.V1CertGen.sigOID">
            <summary>
            The sig oid
            </summary>
        </member>
        <member name="F:OSCA.Crypto.V1CertGen.sigAlgId">
            <summary>
            The sig alg identifier
            </summary>
        </member>
        <member name="F:OSCA.Crypto.V1CertGen.signatureAlgorithm">
            <summary>
            The signature algorithm
            </summary>
        </member>
        <member name="M:OSCA.Crypto.V1CertGen.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:OSCA.Crypto.V1CertGen.Reset">
            <summary>
            Reset the Generator.
            </summary>
        </member>
        <member name="M:OSCA.Crypto.V1CertGen.GetVersion">
            <summary>
            The X509 version this certificate generator will create
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSCA.Crypto.V1CertGen.SetSerialNumber(Org.BouncyCastle.Math.BigInteger)">
            <summary>
            Set the certificate's serial number.
            </summary>
            <remarks>Make serial numbers long, if you have no serial number policy make sure the number is at least 16 bytes of secure random data.
            You will be surprised how ugly a serial number collision can get.</remarks>
            <param name="serialNumber">The serial number.</param>
        </member>
        <member name="M:OSCA.Crypto.V1CertGen.SetIssuerDN(Org.BouncyCastle.Asn1.X509.X509Name)">
            <summary>
            Set the issuer distinguished name.
            The issuer is the entity whose private key is used to sign the certificate.
            </summary>
            <param name="issuer">The issuers DN.</param>
        </member>
        <member name="M:OSCA.Crypto.V1CertGen.SetNotBefore(System.DateTime)">
            <summary>
            Set the date that this certificate is to be valid from.
            </summary>
            <param name="date">From data</param>
        </member>
        <member name="M:OSCA.Crypto.V1CertGen.SetNotAfter(System.DateTime)">
            <summary>
            Set the date after which this certificate will no longer be valid.
            </summary>
            <param name="date">Until data</param>
        </member>
        <member name="M:OSCA.Crypto.V1CertGen.SetSubjectDN(Org.BouncyCastle.Asn1.X509.X509Name)">
            <summary>
            Set the subject distinguished name.
            The subject describes the entity associated with the public key.
            </summary>
            <param name="subject">Subject DN</param>
        </member>
        <member name="M:OSCA.Crypto.V1CertGen.SetPublicKey(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)">
            <summary>
            Set the public key that this certificate identifies.
            </summary>
            <param name="publicKey">Public key value</param>
            <exception cref="T:System.ArgumentException">Unable to process key</exception>
        </member>
        <member name="M:OSCA.Crypto.V1CertGen.SetSignatureAlgorithm(System.String)">
            <summary>
            Set the signature algorithm that will be used to sign this certificate.
            This can be either a name or an OID, names are treated as case insensitive.
            </summary>
            <param name="signatureAlgorithm">string representation of the algorithm name</param>
        </member>
        <member name="M:OSCA.Crypto.BcV1CertGen.#ctor">
            <summary>
            Default Constructor.
            </summary>
        </member>
        <member name="M:OSCA.Crypto.BcV1CertGen.Generate(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)">
            <summary>
            Generate a new X509Certificate.
            </summary>
            <param name="privateKey">The private key of the issuer used to sign this certificate.</param>
            <returns>An X509Certificate.</returns>
        </member>
        <member name="M:OSCA.Crypto.BcV1CertGen.Generate(Org.BouncyCastle.Crypto.AsymmetricKeyParameter,System.DateTime,System.DateTime)">
            <summary>
            Extensions are not supported in X.509 V1 certificates.
            </summary>
        </member>
        <member name="M:OSCA.Crypto.BcV1CertGen.generate(Org.BouncyCastle.Security.SecureRandom,Org.BouncyCastle.Crypto.AsymmetricKeyParameter)">
            <summary>
            Generate a new X509Certificate specifying a SecureRandom instance that you would like to use.
            </summary>
            <param name="privateKey">The private key of the issuer used to sign this certificate.</param>
            <param name="random">The Secure Random you want to use.</param>
            <returns>An X509Certificate.</returns>
        </member>
        <member name="M:OSCA.Crypto.BcV1CertGen.GenerateJcaObject(Org.BouncyCastle.Asn1.X509.TbsCertificateStructure,System.Byte[])">
            <summary>
            Generates the jca object.
            </summary>
            <param name="tbsCert">The TBS cert.</param>
            <param name="signature">The signature.</param>
            <returns>The newly minted certificate</returns>
        </member>
        <member name="P:OSCA.Crypto.BcV1CertGen.SignatureAlgNames">
            <summary>
            Allows enumeration of the signature names supported by the generator.
            </summary>
        </member>
        <member name="T:OSCA.Profile.subjectInfoAccess">
             <summary>
             Subject Information Access extension
             </summary>
             <remarks>
             ASN.1 description from RFC 5280:
             <code>
             id-pe-subjectInfoAccess OBJECT IDENTIFIER ::= { id-pe 11 }
             
             SubjectInfoAccessSyntax  ::= SEQUENCE SIZE (1..MAX) OF AccessDescription
             
             AccessDescription  ::=  SEQUENCE {
                 accessMethod          OBJECT IDENTIFIER,
                 accessLocation        GeneralName  }
                 
             id-ad OBJECT IDENTIFIER ::= { id-pkix 48 }
            
             id-ad-caRepository OBJECT IDENTIFIER ::= { id-ad 5 }
             
             id-ad-timeStamping OBJECT IDENTIFIER ::= { id-ad 3 }
             </code>
             </remarks>
        </member>
        <member name="M:OSCA.Profile.subjectInfoAccess.#ctor">
            <summary>
            Create a new SIA extension
            </summary>
        </member>
        <member name="M:OSCA.Profile.subjectInfoAccess.#ctor(System.Boolean)">
            <summary>
            Create a new SIA extension
            </summary>
            <param name="critical">True if critical, else false</param>
        </member>
        <member name="M:OSCA.Profile.subjectInfoAccess.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Create a new SIA extension from an XML file
            </summary>
            <param name="Xml"></param>
            <remarks>
            A sample XML description of the extension:
            <code>
            &lt;Extension&gt;
                &lt;name description="Subject Info Access"&gt;SubjectInfoAccess&lt;/name&gt;
                &lt;critical&gt;false&lt;/critical&gt;
                &lt;value&gt;
                    &lt;accessDescription&gt;
                        &lt;method&gt;CARepository&lt;/method&gt;
                        &lt;location type="uniformResourceIdentifier"&gt;http://foo.com/issuer&lt;/location&gt;
                    &lt;/accessDescription&gt;
                    &lt;accessDescription&gt;
                        &lt;method&gt;TimeStamping&lt;/method&gt;
                        &lt;location type="uniformResourceIdentifier"&gt;http://foo.com/time&lt;/location&gt;
                    &lt;/accessDescription&gt;    
                &lt;/value&gt;
            &lt;/Extension&gt;
            </code>
            </remarks>
        </member>
        <member name="M:OSCA.Profile.subjectInfoAccess.#ctor(Org.BouncyCastle.Asn1.X509.X509Extension)">
            <summary>
            Create SIA extension from an X509Extension
            </summary>
            <param name="Extension">X509Extension instance</param>
        </member>
        <member name="P:OSCA.Profile.subjectInfoAccess.SubjectInfoAccess">
            <summary>
            SIA settings
            </summary>
        </member>
        <member name="P:OSCA.Profile.subjectInfoAccess.SubjectInformationAccess">
            <summary>
            DER encoded value of SubjectInfoAccess
            </summary>
        </member>
        <member name="T:OSCA.Policy.ValidityPolicy">
            <summary>
            Validate that the proposed certificate meets the validity policy
            </summary>
        </member>
        <member name="T:OSCA.Policy.PolicyEnforcement">
            <summary>
            Template for policy enforcement modules
            </summary>
        </member>
        <member name="M:OSCA.Policy.PolicyEnforcement.analyse(Org.BouncyCastle.Asn1.X509.TbsCertificateStructure)">
            <summary>
            Analyse the proposed certificate against the policy enforced by the module
            </summary>
            <param name="tbsCert">Proposed certificate</param>
            <returns>True if compliant, false otherwise</returns>
        </member>
        <member name="P:OSCA.Policy.PolicyEnforcement.result">
            <summary>
            The result of the policy compliance analysis
            </summary>
        </member>
        <member name="T:OSCA.Policy.PathLengthPolicy">
            <summary>
            Validate that the proposed certificate does not violate PathLenghtConstraints
            </summary>
        </member>
        <member name="T:OSCA.ValidityPeriod">
            <summary>
            Type containing a certificate validity period
            </summary>
        </member>
        <member name="F:OSCA.ValidityPeriod.Units">
            <summary>
            Units
            </summary>
        </member>
        <member name="F:OSCA.ValidityPeriod.Period">
            <summary>
            Period
            </summary>
        </member>
        <member name="M:OSCA.ValidityPeriod.#ctor(OSCA.ValidityPeriod.Unit,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OSCA.ValidityPeriod"/> struct.
            </summary>
            <param name="Units">Units.</param>
            <param name="Period">Period.</param>
        </member>
        <member name="M:OSCA.ValidityPeriod.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OSCA.ValidityPeriod"/> struct.
            </summary>
            <param name="Units">Units (Years|Months|Days|Hours)</param>
            <param name="Period">Time period</param>
            <exception cref="T:System.ArgumentException">Unrecognised Validity Unit type: + Units</exception>
        </member>
        <member name="M:OSCA.ValidityPeriod.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:OSCA.ValidityPeriod"/> struct from XML lifetime specification
            </summary>
            <param name="ValidityPeriod">XML lifetime description</param>
            <exception cref="T:System.ArgumentException">Unrecognised Validity Unit type:  + Value</exception>
        </member>
        <member name="M:OSCA.ValidityPeriod.NotAfter(System.DateTime)">
            <summary>
            Calculate the NotAfter value
            </summary>
            <param name="NotBefore">NotBefore value</param>
            <returns>NotAfter value</returns>
        </member>
        <member name="M:OSCA.ValidityPeriod.NotBefore(System.DateTime)">
            <summary>
            Calculate the NotBefore value
            </summary>
            <param name="NotAfter">NotAfter value</param>
            <returns>
            NotAfter value
            </returns>
        </member>
        <member name="M:OSCA.ValidityPeriod.ToXml(System.String)">
            <summary>
            Provide an XML description of the validity period
            </summary>
            <returns>XML lifetime value</returns>
        </member>
        <member name="M:OSCA.ValidityPeriod.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:OSCA.ValidityPeriod.Unit">
            <summary>
            Units for validity period
            </summary>
        </member>
        <member name="F:OSCA.ValidityPeriod.Unit.Years">
            <summary>
            Years
            </summary>
        </member>
        <member name="F:OSCA.ValidityPeriod.Unit.Months">
            <summary>
            Months
            </summary>
        </member>
        <member name="F:OSCA.ValidityPeriod.Unit.Days">
            <summary>
            Days
            </summary>
        </member>
        <member name="F:OSCA.ValidityPeriod.Unit.Hours">
            <summary>
            Hours
            </summary>
        </member>
        <member name="T:OSCA.Offline.sysCA">
            <summary>
            Class describing a generic System Crypto CA
            </summary>
            <remarks>This is a Version 3.x class</remarks>
        </member>
        <member name="T:OSCA.Offline.OSCA_CA">
            <summary>
            Abstract base class for OSCA CAs to implement
            <remarks>This class pushes the icky bits of crypto, cert versions, etc. to the concrete classes</remarks>
            </summary>
        </member>
        <member name="F:OSCA.Offline.OSCA_CA.configFile">
            <summary>
            The configuration file
            </summary>
        </member>
        <member name="F:OSCA.Offline.OSCA_CA.version">
            <summary>
            CA version
            </summary>
        </member>
        <member name="F:OSCA.Offline.OSCA_CA.name">
            <summary>
            The name
            </summary>
        </member>
        <member name="F:OSCA.Offline.OSCA_CA.caType">
            <summary>
            The type
            </summary>
            <remarks>From Version 3.x this value is used to determine which concrete class is used to create the CA instance</remarks>
        </member>
        <member name="F:OSCA.Offline.OSCA_CA.type">
            <summary>
            CA role - rootCA|issuingCA
            </summary>
            <remarks>Historical ambiguity in naming this variable!  From Version 3.x caType actually defines the concrete instance type, not this.</remarks>
        </member>
        <member name="F:OSCA.Offline.OSCA_CA.dbFileLocation">
            <summary>
            The database file location
            </summary>
        </member>
        <member name="F:OSCA.Offline.OSCA_CA.profilesLocation">
            <summary>
            The profiles location
            </summary>
        </member>
        <member name="F:OSCA.Offline.OSCA_CA.publicKeyAlgorithm">
            <summary>
            The public key algorithm
            </summary>
        </member>
        <member name="F:OSCA.Offline.OSCA_CA.publicKeySize">
            <summary>
            The public key size
            </summary>
        </member>
        <member name="F:OSCA.Offline.OSCA_CA.signatureAlgorithm">
            <summary>
            The signature algorithm
            </summary>
        </member>
        <member name="F:OSCA.Offline.OSCA_CA.fips140">
            <summary>
            Fips140 flag
            </summary>
            <remarks>
            From Version 3.x this is no longer used to determine the concrete class for the CA instance (use <see cref="F:OSCA.Offline.OSCA_CA.caType"/> instead)
            </remarks>
        </member>
        <member name="F:OSCA.Offline.OSCA_CA.lastSerial">
            <summary>
            The last serial
            </summary>
        </member>
        <member name="F:OSCA.Offline.OSCA_CA.crlFileLocation">
            <summary>
            The CRL file location
            </summary>
        </member>
        <member name="F:OSCA.Offline.OSCA_CA.lastCRL">
            <summary>
            The last CRL
            </summary>
        </member>
        <member name="F:OSCA.Offline.OSCA_CA.crlInterval">
            <summary>
            The CRL interval
            </summary>
        </member>
        <member name="F:OSCA.Offline.OSCA_CA.caCertificate">
            <summary>
            The certificate
            </summary>
        </member>
        <member name="F:OSCA.Offline.OSCA_CA.cspParam">
            <summary>
            Key refernce for XML signing
            </summary>
        </member>
        <member name="F:OSCA.Offline.OSCA_CA.ca">
            <summary>
            Reference to the 'CA' element in the config file
            </summary>
        </member>
        <member name="F:OSCA.Offline.OSCA_CA.policyEnforcement">
            <summary>
            The policy enforcement
            </summary>
        </member>
        <member name="F:OSCA.Offline.OSCA_CA.eventLog">
            <summary>
            The event log
            </summary>
        </member>
        <member name="M:OSCA.Offline.OSCA_CA.#ctor(System.String)">
            <summary>
            Construct a CA object
            <remarks> Derived classes should call this before doing anything else</remarks>
            </summary>
            <param name="ConfigFile">Full pathname to config file</param>
            <param name="Password">Password for key file</param>
            <exception cref="T:Org.BouncyCastle.Security.GeneralSecurityException">Signature failed on CA config file</exception>
        </member>
        <member name="F:OSCA.Offline.OSCA_CA.nullPeriod">
            <summary>
            The null period
            </summary>
        </member>
        <member name="M:OSCA.Offline.OSCA_CA.nextCertSerial">
            <summary>
            Nexts the cert serial.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSCA.Offline.OSCA_CA.nextCrlSerial">
            <summary>
            Nexts the CRL serial.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSCA.Offline.OSCA_CA.saveCertSerial(Org.BouncyCastle.Math.BigInteger)">
            <summary>
            Saves the cert serial.
            </summary>
            <param name="certSerial">The cert serial.</param>
            <exception cref="T:Org.BouncyCastle.Security.GeneralSecurityException">Signature failed on CA config file</exception>
        </member>
        <member name="M:OSCA.Offline.OSCA_CA.saveCRLSerial(Org.BouncyCastle.Math.BigInteger)">
            <summary>
            Saves the CRL serial.
            </summary>
            <param name="crlSerial">The CRL serial.</param>
            <exception cref="T:Org.BouncyCastle.Security.GeneralSecurityException">Signature failed on CA config file</exception>
        </member>
        <member name="M:OSCA.Offline.OSCA_CA.getCertificateGenerator">
            <summary>
            Gets the certificate generator.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSCA.Offline.OSCA_CA.generate(OSCA.Crypto.ICertGen,OSCA.Profile.Profile,System.DateTime,System.DateTime)">
            <summary>
            Generates the certificate.
            </summary>
            <param name="gen">The generator.</param>
            <param name="profile">The profile.</param>
            <param name="notBefore">The not before.</param>
            <param name="notAfter">The not after.</param>
            <returns></returns>
        </member>
        <member name="M:OSCA.Offline.OSCA_CA.generate(OSCA.Crypto.ICertGen)">
            <summary>
            Generates the certificate.
            </summary>
            <param name="gen">The generator.</param>
            <returns></returns>
        </member>
        <member name="M:OSCA.Offline.OSCA_CA.generate(OSCA.Crypto.ICertGen,Org.BouncyCastle.Asn1.X509.X509Extensions)">
            <summary>
            Generates the certificate.
            </summary>
            <param name="gen">The generator.</param>
            <param name="ext">The extensions.</param>
            <returns></returns>
        </member>
        <member name="M:OSCA.Offline.OSCA_CA.checkCaCertValid(Org.BouncyCastle.X509.X509Certificate)">
            <summary>
            Checks the ca cert is valid.
            </summary>
            <param name="issuingCaCert">The issuing ca cert.</param>
            <returns>
            True if valid, false if not
            </returns>
        </member>
        <member name="M:OSCA.Offline.OSCA_CA.IssueCertificate(System.Byte[],OSCA.Profile.Profile)">
            <summary>
            Issue a certificate based on a PKCS#10 certificate request and OSCA profile
            </summary>
            <param name="Request">DER encoded PKCS#10 certificate request</param>
            <param name="Profile">OSCA Profile</param>
            <returns>
            Requested certificate
            </returns>
            <exception cref="T:System.Exception">Certificate issue failed</exception>
            <remarks>The caller should perform any required POP or other validation on the request prior to calling this method</remarks>
        </member>
        <member name="M:OSCA.Offline.OSCA_CA.IssueCertificate(System.Byte[],OSCA.ValidityPeriod)">
            <summary>
            Issue a certificate based on a PKCS#10 certificate request and validity period
            </summary>
            <param name="Request">DER encoded PKCS#10 certificate request</param>
            <param name="Validity">Validity period for certificate</param>
            <returns>
            Requested certificate
            </returns>
            <exception cref="T:System.Exception">Certificate issue failed</exception>
            <exception cref="T:System.ArgumentException">Invalid signature algorithm in request</exception>
            <remarks>The caller should perform any required POP or other validation on the request prior to calling this method</remarks>
        </member>
        <member name="M:OSCA.Offline.OSCA_CA.IssueCertificate(System.Byte[],OSCA.Profile.Profile,System.DateTime,System.DateTime)">
            <summary>
            Issues the certificate.
            </summary>
            <param name="Request">DER encoded PKCS#10 certificate request</param>
            <param name="Profile">A profile instance.</param>
            <param name="NotBefore">Not before date.</param>
            <param name="NotAfter">Not after date.</param>
            <returns></returns>
            <exception cref="T:System.Exception">Certificate issue failed</exception>
            <remarks>The caller should perform any required POP or other validation on the request prior to calling this method</remarks>
        </member>
        <member name="M:OSCA.Offline.OSCA_CA.IssueCertificate(Org.BouncyCastle.Pkcs.Pkcs10CertificationRequest,OSCA.Profile.Profile)">
            <summary>
            Issue a certificate based on a PKCS#10 certificate request object and OSCA profile
            </summary>
            <param name="Request">PKCS#10 certificate request</param>
            <param name="Profile">The profile.</param>
            <returns>
            Requested certificate
            </returns>
            <exception cref="T:System.Exception">Certificate issue failed</exception>
            <remarks>The caller should perform any required POP or other validation on the request prior to calling this method</remarks>
        </member>
        <member name="M:OSCA.Offline.OSCA_CA.IssueCertificate(Org.BouncyCastle.Pkcs.Pkcs10CertificationRequest,OSCA.ValidityPeriod)">
            <summary>
            Issue a certificate based on a PKCS#10 certificate request object and validity period
            </summary>
            <param name="Request">PKCS#10 certificate request</param>
            <param name="Validity">Validity period for certificate</param>
            <returns>
            Requested certificate
            </returns>
            <exception cref="T:System.Exception">Certificate issue failed</exception>
            <exception cref="T:System.ArgumentException">Invalid signature algorithm in request</exception>
            <remarks>The caller should perform any required POP or other validation on the request prior to calling this method</remarks>
        </member>
        <member name="M:OSCA.Offline.OSCA_CA.IssueCertificate(Org.BouncyCastle.Pkcs.Pkcs10CertificationRequest,OSCA.Profile.Profile,System.DateTime,System.DateTime)">
            <summary>
            Issue a certificate based on a PKCS#10 certificate request object, OSCA profile and notBefore/notAfter dates
            </summary>
            <param name="Request">PKCS#10 certificate request</param>
            <param name="Profile">The profile.</param>
            <param name="NotBefore">The not before.</param>
            <param name="NotAfter">The not after.</param>
            <returns>
            Requested certificate
            </returns>
            <exception cref="T:System.Exception">Certificate issue failed</exception>
            <remarks>
            This method is intended to support rekey.
            <para>The caller should perform any required POP or other validation on the request prior to calling this method</para>
            </remarks>
        </member>
        <member name="M:OSCA.Offline.OSCA_CA.issueCertificate(Org.BouncyCastle.Pkcs.Pkcs10CertificationRequest,OSCA.Profile.Profile,System.DateTime,System.DateTime)">
            <summary>
            Issues the certificate.
            </summary>
            <param name="request">The request.</param>
            <param name="profile">The profile</param>
            <param name="notBefore">The not before.</param>
            <param name="notAfter">The not after.</param>
            <returns>
            Certificate
            </returns>
            <exception cref="T:System.ArgumentException">Invalid signature algorithm in request</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Invalid lifetime units in ValidityPeriod</exception>
        </member>
        <member name="M:OSCA.Offline.OSCA_CA.RevokeCertificate(Org.BouncyCastle.X509.X509Certificate,OSCA.CRLReason)">
            <summary>
            Revoke a certificate
            </summary>
            <param name="Certificate">Certificate to revoke</param>
            <param name="Reason">Revocation reason</param>
            <returns>
            Status of the certificate
            </returns>
            <exception cref="T:System.ApplicationException">Certificate not found</exception>
            <exception cref="T:System.ApplicationException">Certificate not found</exception>
            <exception cref="T:System.ApplicationException">Certificate not found</exception>
        </member>
        <member name="M:OSCA.Offline.OSCA_CA.UnRevokeCertificate(Org.BouncyCastle.X509.X509Certificate)">
            <summary>
            Unrevoke certificate. (unsuspend)
            </summary>
            <param name="Certificate">The certificate.</param>
            <returns></returns>
        </member>
        <member name="M:OSCA.Offline.OSCA_CA.IssueCRL">
            <summary>
            Issue a CRL (containing all revoked certificates)
            </summary>
            <returns>
            CRL number
            </returns>
        </member>
        <member name="M:OSCA.Offline.OSCA_CA.createCRL(Org.BouncyCastle.X509.X509V2CrlGenerator)">
            <summary>
            Creates a CRL.
            </summary>
            <param name="crlGen">The CRL generator.</param>
        </member>
        <member name="M:OSCA.Offline.OSCA_CA.GetCRL">
            <summary>
            Retrieve the current CRL
            </summary>
            <returns>
            The current CRL
            </returns>
        </member>
        <member name="M:OSCA.Offline.OSCA_CA.Backup(System.String,System.String)">
            <summary>
            Backup the CA key material to a PKCS#12 file
            </summary>
            <param name="Password">Strong password used for encryption</param>
            <param name="OutFile">Outut file</param>
        </member>
        <member name="M:OSCA.Offline.OSCA_CA.startLogging">
            <summary>
            Starts the logging system.  This should be started within the subClass constructor.
            </summary>
        </member>
        <member name="M:OSCA.Offline.OSCA_CA.logEvent(OSCA.Log.LogEvent.EventType,System.String)">
            <summary>
            Logs the event.
            </summary>
            <param name="id">The identifier.</param>
            <param name="message">The message.</param>
        </member>
        <member name="M:OSCA.Offline.OSCA_CA.StopCA">
            <summary>
            Writes a 'CA Stopped' event to the log
            </summary>
            <remarks>
            To 'stop' the CA, delete the object
            </remarks>
        </member>
        <member name="P:OSCA.Offline.OSCA_CA.LastCRLNumber">
            <summary>
            Serial number of the last CRL issued
            </summary>
        </member>
        <member name="P:OSCA.Offline.OSCA_CA.LastSerialNumber">
            <summary>
            Serial number of the last certificate issued
            </summary>
        </member>
        <member name="P:OSCA.Offline.OSCA_CA.FIPS140Mode">
            <summary>
            True if this CA is in FIPS 140 mode
            </summary>
        </member>
        <member name="P:OSCA.Offline.OSCA_CA.Type">
            <summary>
            CA Type
            </summary>
        </member>
        <member name="P:OSCA.Offline.OSCA_CA.Role">
            <summary>
            New in Version 3.x - The Role of CA rootCA|subCA
            </summary>
        </member>
        <member name="P:OSCA.Offline.OSCA_CA.CAName">
            <summary>
            Distinguished Name of the CA
            </summary>
        </member>
        <member name="P:OSCA.Offline.OSCA_CA.PublicKeyAlgorithm">
            <summary>
            Algorithm for the CAs key-pair
            </summary>
        </member>
        <member name="P:OSCA.Offline.OSCA_CA.SignatureAlgorithm">
            <summary>
            Algorithm for the CAs signature
            </summary>
        </member>
        <member name="P:OSCA.Offline.OSCA_CA.Certificate">
            <summary>
            CA certificate
            </summary>
        </member>
        <member name="M:OSCA.Offline.sysCA.#ctor(System.String)">
            <summary>
            Create an instance of a generic System Crypto CA
            </summary>
            <param name="ConfigFile">Full pathname to config file</param>
            <exception cref="T:Org.BouncyCastle.Security.InvalidParameterException">Invalid FIPS140 flag for this CA instance</exception>
        </member>
        <member name="M:OSCA.Offline.sysCA.Backup(System.String,System.String)">
            <summary>
            Backup the CA key material to a PKCS#12 file
            </summary>
            <param name="Password">Strong password used for encryption</param>
            <param name="OutputFile">Full pathname to the PKCS#12 output file</param>
            <exception cref="T:System.ApplicationException">Failed Key Backup</exception>
        </member>
        <member name="M:OSCA.Offline.sysCA.getCertificateGenerator">
            <summary>
            Return a certificate generator instance for this CA
            </summary>
            <returns>Certificate generator</returns>
        </member>
        <member name="M:OSCA.Offline.sysCA.generate(OSCA.Crypto.ICertGen,OSCA.Profile.Profile,System.DateTime,System.DateTime)">
            <summary>
            Generates the certificate.
            </summary>
            <param name="gen">The generator.</param>
            <param name="profile">The profile.</param>
            <param name="notBefore"></param>
            <param name="notAfter"></param>
            <returns></returns>
        </member>
        <member name="M:OSCA.Offline.sysCA.generate(OSCA.Crypto.ICertGen)">
            <summary>
            Generate a certificate
            </summary>
            <remarks>All extensions in request will be included in the certificate</remarks>
            <param name="gen">Certificate generator instance</param>
            <returns>New certificate</returns>
        </member>
        <member name="M:OSCA.Offline.sysCA.generate(OSCA.Crypto.ICertGen,Org.BouncyCastle.Asn1.X509.X509Extensions)">
            <summary>
            Generate a certificate
            </summary>
            <remarks>Only the extensions supplied will be included in the certificate</remarks>
            <param name="gen">Certificate generator instance</param>
            <param name="ext">Extensions to include in the certificate</param>
            <returns>New certificate</returns>
        </member>
        <member name="M:OSCA.Offline.sysCA.IssueCRL">
            <summary>
            Issue a CRL (containing all revoked certificates)
            </summary>
            <returns>CRL number</returns>
        </member>
        <member name="M:OSCA.generalNames.getGenName(System.String)">
            <summary>
            Return the OSCA GenName type for a given type
            </summary>
            <param name="type">Type of name</param>
            <returns>GenName value</returns>
        </member>
        <member name="M:OSCA.generalNames.createGeneralNames(Org.BouncyCastle.Asn1.X509.GeneralName[])">
            <summary>
            Create a GeneralNames object containing multiple names
            </summary>
            <param name="genNames">Array of GeneralName</param>
            <returns>GeneralNames object</returns>
        </member>
        <member name="M:OSCA.generalNames.createGeneralNames(Org.BouncyCastle.Asn1.X509.GeneralName)">
            <summary>
            Create a GeneralNames object containing one name
            </summary>
            <param name="genName">Name of the gen.</param>
            <returns>
            GeneralNames object
            </returns>
        </member>
        <member name="M:OSCA.generalNames.createGeneralNames(System.String,System.String)">
            <summary>
            Create a GeneralNames instance containing one name
            </summary>
            <param name="type">Type of name</param>
            <param name="name">Name value</param>
            <returns>GeneralNames object</returns>
        </member>
        <member name="M:OSCA.generalNames.createGeneralName(System.String,System.String)">
            <summary>
            Create a GeneralName instance
            </summary>
            <param name="type">Type of name</param>
            <param name="name">Name value</param>
            <returns>GeneralName object</returns>
        </member>
        <member name="M:OSCA.generalNames.convertGeneralName(Org.BouncyCastle.Asn1.X509.GeneralName)">
            <summary>
            Create an OSCAGeneralName object from a GeneralName
            </summary>
            <param name="genName">GeneralName object</param>
            <returns>OSCAGeneralName object</returns>
        </member>
        <member name="T:OSCA.Profile.extendedKeyUsage">
            <summary>
            Extended Key Usage extension
            </summary>
            <remarks>ASN.1 description from RFC 5280:
            <code>
            id-ce-extKeyUsage OBJECT IDENTIFIER ::= { id-ce 37 }
             
            ExtKeyUsageSyntax ::= SEQUENCE SIZE (1..MAX) OF KeyPurposeId
            
            KeyPurposeId ::= OBJECT IDENTIFIER
            
            anyExtendedKeyUsage OBJECT IDENTIFIER ::= { id-ce-extKeyUsage 0 }
            
            id-kp OBJECT IDENTIFIER ::= { id-pkix 3 }
            
            id-kp-serverAuth             OBJECT IDENTIFIER ::= { id-kp 1 }
            id-kp-clientAuth             OBJECT IDENTIFIER ::= { id-kp 2 }
            id-kp-codeSigning             OBJECT IDENTIFIER ::= { id-kp 3 }
            id-kp-emailProtection         OBJECT IDENTIFIER ::= { id-kp 4 }
            id-kp-timeStamping            OBJECT IDENTIFIER ::= { id-kp 8 }
            id-kp-OCSPSigning            OBJECT IDENTIFIER ::= { id-kp 9 }
            </code>
            In addition, a number of private and/or legacy EKU values are supported:
            <code>
            id-kp-ipsecEndSystem        OBJECT IDENTIFIER ::= { id-kp 5 }
            id-kp-ipsecTunnel           OBJECT IDENTIFIER ::= { id-kp 6 }
            id-kp-ipsecUser             OBJECT IDENTIFIER ::= { id-kp 7 }
            --> Microsoft
            id-kp-MsSmartCardLogon        OBJECT IDENTIFIER ::= { 1 3 6 1 4 1 311 20 2 2 }
            id-KP-MsCodeSigningCom        OBJECT IDENTIFIER ::= { 1 3 6 1 4 1 311 2 1 22 }
            id-KP-MsCodeSigningInd        OBJECT IDENTIFIER ::= { 1 3 6 1 4 1 311 2 1 21 }
            id-KP-MsDocumentSigning       OBJECT IDENTIFIER ::= { 1 3 6 1 4 1 311 10 3 12 }
            id-KP-MsEFSCrypto             OBJECT IDENTIFIER ::= { 1 3 6 1 4 1 311 10 3 4 }
            id-KP-MsEFSRecovery           OBJECT IDENTIFIER ::= { 1 3 6 1 4 1 311 10 3 4 1 }
            id-KP-MsCertReqstAgent        OBJECT IDENTIFIER ::= { 1 3 6 1 4 1 311 20 2 1 }
            </code>
            </remarks>
        </member>
        <member name="M:OSCA.Profile.extendedKeyUsage.LookupOID(System.String)">
            <summary>
            Lookup the OID for an EKU name
            </summary>
            <param name="EkuName"></param>
            <returns></returns>
        </member>
        <member name="M:OSCA.Profile.extendedKeyUsage.#ctor">
            <summary>
            Create ExtendedKeyUsage extension
            </summary>
        </member>
        <member name="M:OSCA.Profile.extendedKeyUsage.#ctor(System.Boolean)">
            <summary>
            Create ExtendedKeyUsage extension
            </summary>
            <param name="Critical">True = Critical, False = Not Critical</param>
        </member>
        <member name="M:OSCA.Profile.extendedKeyUsage.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Create ExtendedKeyUsage extension from XML profile file entry
            </summary>
            <remarks>Example XML description of the extension:
            <code>
            &lt;Extension&gt;
                &lt;name&gt;ExtendedKeyUsage&lt;/name&gt;
                &lt;critical&gt;false&lt;/critical&gt; 
                &lt;value&gt;
                    &lt;eku&gt;ClientAuth&lt;/eku&gt;
                &lt;/value&gt;
            &lt;/Extension&gt;
            </code>
            </remarks>
            <param name="xml">XML version of the extension</param>
        </member>
        <member name="M:OSCA.Profile.extendedKeyUsage.#ctor(Org.BouncyCastle.Asn1.X509.X509Extension)">
            <summary>
            Create ExtendedKeyUsage from an X509Extension
            </summary>
            <param name="Extension">X509 extension</param>
            <remarks>
            Sub classses must provide an implementation to decode their values
            </remarks>
        </member>
        <member name="M:OSCA.Profile.extendedKeyUsage.ToXml">
            <summary>
            Provide an XML version of the extension
            </summary>
            <remarks>Example XML description of the extension:
            <code>
            &lt;Extension&gt;
                &lt;name&gt;ExtendedKeyUsage&lt;/name&gt;
                &lt;critical&gt;false&lt;/critical&gt; 
                &lt;value&gt;
                    &lt;eku&gt;ClientAuth&lt;/eku&gt;
                &lt;/value&gt;
            &lt;/Extension&gt;
            </code>
            </remarks>
            <returns>XML encoding of the extension</returns>
        </member>
        <member name="M:OSCA.Profile.extendedKeyUsage.Add(System.String)">
            <summary>
            Add an ExtendedKeyUsage to the extension
            </summary>
            <param name="value">EKU to add</param>
        </member>
        <member name="M:OSCA.Profile.extendedKeyUsage.Remove(System.String)">
            <summary>
            Remove an ExtendedKeyUsage from the extension
            </summary>
            <param name="value">EKU to remove</param>
        </member>
        <member name="M:OSCA.Profile.extendedKeyUsage.LookUp(System.String)">
            <summary>
            Lookup the OID for an Extended Key Usage
            </summary>
            <param name="eku">Extended Key Usage name</param>
            <returns>OID</returns>        
        </member>
        <member name="M:OSCA.Profile.extendedKeyUsage.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that describes this extension
            </summary>
            <returns>
            A <see cref="T:System.String"/> that describes this extension
            </returns>
        </member>
        <member name="P:OSCA.Profile.extendedKeyUsage.ExtKeyUsageText">
            <summary>
            Textual list of possible ExtendedKeyUsages
            </summary>
        </member>
        <member name="P:OSCA.Profile.extendedKeyUsage.ExtKeyUsageOid">
            <summary>
            OID list of possible ExtendedKeyUsages
            </summary>
        </member>
        <member name="P:OSCA.Profile.extendedKeyUsage.ExtKUsage">
            <summary>
            ExtendedKeyUsage settings
            </summary>
        </member>
        <member name="P:OSCA.Profile.extendedKeyUsage.ExtendedKeyUsage">
            <summary>
            DER encoded value of KeyUsage
            </summary>
        </member>
        <member name="P:OSCA.Profile.extendedKeyUsage.DerEncoding">
            <summary>
            DER encoded value of extension
            </summary>
        </member>
        <member name="T:OSCA.OSCA">
            <summary>
            Factory for loading OSCA CA instances
            </summary>
        </member>
        <member name="M:OSCA.OSCA.LoadCA(System.String,System.String)">
            <summary>
            Load a CA instance based on the CA type in the configuration file
            </summary>
            <param name="ConfigFile">Full pathname of the CA config file</param>
            <param name="Password">Password to access key material</param>
            <returns>OSCA CA instance or null</returns>
        </member>
        <member name="T:OSCA.Log.LogFile">
            <summary>
            Create an OSCA log file
            </summary>
        </member>
        <member name="M:OSCA.Log.LogFile.createLogFile(System.String,System.String,Org.BouncyCastle.X509.X509Certificate,System.Security.Cryptography.CspParameters)">
            <summary>
            Create an OSCA log file
            </summary>
            <param name="logFile">Pathname of log file</param>
            <param name="version">Log system version</param>
            <param name="cert">XML signing certificate</param>
            <param name="cspParam">CSP parameters for signing key</param>
        </member>
        <member name="T:OSCA.Crypto.SysV1CertGen">
            <summary>
            A class to Generate Version 3 X509Certificates.
            Uses system crypto libraries
            </summary>
        </member>
        <member name="M:OSCA.Crypto.SysV1CertGen.#ctor">
            <summary>
            Constructor for OSCA V1 Certificate Generator (system crypto libraries)
            </summary>
        </member>
        <member name="M:OSCA.Crypto.SysV1CertGen.Generate(System.Security.Cryptography.CspParameters)">
            <summary>
            Generate an X509 Certificate
            </summary>
            <param name="cspParam">CspParameters instance that has the private signing key</param>
            <returns>An X509 Certificate</returns>
        </member>
        <member name="M:OSCA.Crypto.SysV1CertGen.Generate(System.Security.Cryptography.CspParameters,Org.BouncyCastle.Asn1.X509.X509Extensions)">
            <summary>
            Generate an X509Certificate.
            </summary>
            <param name="cspParam">CspParameters instance that has the private signing key</param>
            <param name="Extensions">Extensions to include in the certificate (ignored)</param>
            <returns>An X509Certificate.</returns>
        </member>
        <member name="P:OSCA.Crypto.SysV1CertGen.SignatureAlgNames">
            <summary>
            Allows enumeration of the signature names supported by the generator.
            </summary>
        </member>
        <member name="T:OSCA.Offline.CaFactory">
            <summary>
            CA Factory
            </summary>
        </member>
        <member name="M:OSCA.Offline.CaFactory.CreateRootCA(OSCA.Offline.CAConfig)">
            <summary>
            Create a root (self-signed) CA
            </summary>
            <param name="Config">CA Config structure containing the initialisation parameters</param>
            <returns>Full pathname for the configuration file</returns>
        </member>
        <member name="M:OSCA.Offline.CaFactory.CreateSubCA(OSCA.Offline.CAConfig,OSCA.ICA)">
            <summary>
            Create a new Subordinate CA using the setup parameters from a CAConfig object
            The Issuing CA must be available to create and sign a certificate
            </summary>
            <param name="Config">CAConfig object</param>
            <param name="IssuingCA">Object reference for issuing CA</param>
            <returns>Full pathname of CA config file</returns>
        </member>
        <member name="M:OSCA.Offline.CaFactory.CreateSubCA(OSCA.Offline.CAConfig)">
            <summary>
            Create a new Subordinate CA certificate request using the setup parameters from a CAConfig object
            </summary>
            <remarks>Only System cryptography supported</remarks>
            <param name="Config">CAConfig object</param>
            <returns>PKCS#10 certificate request</returns>
        </member>
        <member name="M:OSCA.Offline.CaFactory.CreateSubCA(System.String,Org.BouncyCastle.X509.X509Certificate)">
            <summary>
            Complete the creation of a Subordinate CA using the certificate returned from the issuing CA.
            A pending request must exist
            </summary>
            <param name="ConfigFile">Pathname for the CA config file</param>
            <param name="Certificate">SubCA certificate</param>
        </member>
        <member name="M:OSCA.Offline.CaFactory.createFinalCAConfig(OSCA.Offline.CAConfig,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.X509.X509Certificate,System.String)">
            <summary>
            Create a final CA Config file 
            </summary>
            <param name="config">CA Config object</param>
            <param name="serialNumber">Initial serial number</param>
            <param name="cert">CA certificate</param>
            <param name="caKey">CA keyfile</param>
            <returns>CA Config file location</returns>
        </member>
        <member name="M:OSCA.Offline.CaFactory.createPendingCAConfig(OSCA.Offline.CAConfig,Org.BouncyCastle.Math.BigInteger,Org.BouncyCastle.Pkcs.Pkcs10CertificationRequest,System.String)">
            <summary>
            Create an initial CA Config file 
            </summary>
            <param name="config">CA Config object</param>
            <param name="serialNumber">Initial serial number</param>
            <param name="request">Certificate request</param>
            <param name="caKey">CA keyfile</param>
            <returns>CA Config file location</returns>
        </member>
        <member name="T:OSCA.Profile.ocspNocheck">
            <summary>
            OCSP NoCheck extension
            </summary>
            <remarks>   
            A CA may specify that an OCSP client can trust a responder for the
            lifetime of the responder's certificate. The CA does so by including
            the extension id-pkix-ocsp-nocheck. This SHOULD be a non-critical
            extension. The value of the extension should be NULL. CAs issuing
            such a certificate should realized that a compromise of the
            responder's key, is as serious as the compromise of a CA key used to
            sign CRLs, at least for the validity period of this certificate. CA's
            may choose to issue this type of certificate with a very short
            lifetime and renew it frequently. (RFC 2560)<br />
            <code>
            id-pkix-ocsp-nocheck OBJECT IDENTIFIER ::= { id-pkix-ocsp 5 }
            </code>
            </remarks>
        </member>
        <member name="M:OSCA.Profile.ocspNocheck.#ctor">
            <summary>
            Create OcspNocheck extension
            </summary>
        </member>
        <member name="M:OSCA.Profile.ocspNocheck.#ctor(System.Boolean)">
            <summary>
            Create OcspNocheck extension
            </summary>
            <param name="Critical">True = Critical, False = Not Critical</param>
        </member>
        <member name="M:OSCA.Profile.ocspNocheck.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Create OcspNocheck extension from XML profile file entry
            </summary>
            <param name="xml">OSCA XML description of the extension</param>
            <remarks>Sample OSCA XML description of the OcspNoCheck extension:
            <code>
             &lt;Extension&gt;
               &lt;name description="OCSP Nocheck"&gt;OcspNocheck&lt;/name&gt;
               &lt;critical&gt;false&lt;/critical&gt;
               &lt;value /&gt;
             &lt;/Extension&gt;
            </code> 
            </remarks>
        </member>
        <member name="M:OSCA.Profile.ocspNocheck.#ctor(Org.BouncyCastle.Asn1.X509.X509Extension)">
            <summary>
            Create OcspNoCheck extension from X509Extension
            </summary>
            <param name="Extension">X509Extension instance</param>
        </member>
        <member name="M:OSCA.Profile.ocspNocheck.ToXml">
            <summary>
            Provide an XML version of the extension
            </summary>
            <returns>XML encoding of the extension</returns>
            <remarks>Sample OSCA XML description of the OcspNoCheck extension:
            <code>
             &lt;Extension&gt;
               &lt;name description="OCSP Nocheck"&gt;OcspNocheck&lt;/name&gt;
               &lt;critical&gt;false&lt;/critical&gt;
               &lt;value /&gt;
             &lt;/Extension&gt;
            </code> 
            </remarks>
        </member>
        <member name="M:OSCA.Profile.ocspNocheck.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that describes this extension
            </summary>
            <returns>
            A <see cref="T:System.String"/> that describes this extension
            </returns>
        </member>
        <member name="M:OSCA.Profile.ocspNocheck.encode">
            <summary>
            Encodes this instance.
            </summary>
        </member>
        <member name="P:OSCA.Profile.ocspNocheck.OcspNocheck">
            <summary>
            DER encoded value of OcspNocheck
            </summary>
        </member>
        <member name="P:OSCA.Profile.ocspNocheck.DerEncoding">
            <summary>
            DER encoded value of extension
            </summary>
        </member>
        <member name="T:OSCA.Offline.Database">
            <summary>
            Class to support access to the OSCA database
            </summary>
        </member>
        <member name="M:OSCA.Offline.Database.CreateDB(OSCA.Offline.CAConfig,Org.BouncyCastle.X509.X509Certificate,System.Security.Cryptography.CspParameters)">
            <summary>
            Create a CA Database file
            </summary>
            <param name="config">CA Config object</param>
            <param name="cert">CA certificate</param>
            <param name="cspParam">CSP with signing key</param>
            <returns>Location of the DB file</returns>
        </member>
        <member name="M:OSCA.Offline.Database.CreateDB(System.String,Org.BouncyCastle.X509.X509Certificate,System.Security.Cryptography.CspParameters)">
            <summary>
            Create a CA Database file
            </summary>
            <param name="dbFile">Database file location</param>
            <param name="cert">CA certificate</param>
            <param name="cspParam">CSP with signing key</param>
            <returns>Location of the DB file</returns>
        </member>
        <member name="M:OSCA.Offline.Database.AddCertificate(Org.BouncyCastle.X509.X509Certificate,System.Byte[],System.String,System.String,Org.BouncyCastle.X509.X509Certificate,System.Security.Cryptography.CspParameters)">
            <summary>
            Add a certificate to a CA Database
            </summary>
            <param name="cert">Certificate to add</param>
            <param name="request">PKCS#10 certificate request</param>
            <param name="profile">Name of profile used to create certificate</param>
            <param name="dbFile">Location of the Database file</param>
            <param name="caCert">The ca cert.</param>
            <param name="cspParam">The CSP parameter.</param>
        </member>
        <member name="M:OSCA.Offline.Database.GetCertificate(Org.BouncyCastle.Math.BigInteger,System.String)">
            <summary>
            Get a certificate from the database based on serial number search
            </summary>
            <param name="SerialNumber">Serial number</param>
            <param name="DbFileLocation">Location of the database file</param>
            <returns>X.509 certificate or null if not found</returns>
            <exception cref="T:Org.BouncyCastle.Security.GeneralSecurityException">Signature failure on database file</exception>
            <exception cref="T:System.ApplicationException">DB corrupt: Duplicate certificate entries.</exception>
        </member>
        <member name="M:OSCA.Offline.Database.GetCertificate(System.String,System.String)">
            <summary>
            Get a certificate from the database based on serial number search
            </summary>
            <param name="SerialNumber">Serial number</param>
            <param name="DbFileLocation">Location of the database file</param>
            <returns>X.509 certificate or null if not found</returns>
            <exception cref="T:Org.BouncyCastle.Security.GeneralSecurityException">Signature failure on database file</exception>
            <exception cref="T:System.ApplicationException">DB corrupt: Duplicate certificate entries.</exception>
        </member>
        <member name="M:OSCA.Offline.Database.GetCertificate(System.Byte[],System.Boolean,System.String)">
            <summary>
            Get a certificate from the database based on a Subject Key ID search
            </summary>
            <remarks>Finds the first certificate with a matching KeyID</remarks>
            <param name="KeyID">The KeyID to search for</param>
            <param name="IncludeRevoked">True to include revoked and expired certificates</param>
            <param name="DbFileLocation">Location of the database file</param>
            <returns>Matching certificate</returns>
            <exception cref="T:Org.BouncyCastle.Security.GeneralSecurityException">Signature failure on database file</exception>
        </member>
        <member name="M:OSCA.Offline.Database.RevokeCertificate(Org.BouncyCastle.X509.X509Certificate,OSCA.CRLReason,System.String,Org.BouncyCastle.X509.X509Certificate,System.Security.Cryptography.CspParameters)">
            <summary>
            Mark a certificate as revoked
            </summary>
            <param name="cert">Certificate to revoke</param>
            <param name="reason">Revocation reason</param>
            <param name="dbFileLocation">Location of CA DB file</param>
            <param name="caCert">The ca cert.</param>
            <param name="cspParam">The CSP parameter.</param>
            <exception cref="T:System.ApplicationException">Certificate already revoked or expired</exception>
        </member>
        <member name="M:OSCA.Offline.Database.unrevoke(Org.BouncyCastle.X509.X509Certificate,System.String,Org.BouncyCastle.X509.X509Certificate,System.Security.Cryptography.CspParameters)">
            <summary>
            Unrevokes the specified cert.
            </summary>
            <param name="cert">The cert.</param>
            <param name="dbFileLocation">The database file location.</param>
            <param name="caCert">The ca cert.</param>
            <param name="cspParam">The CSP parameter.</param>
            <exception cref="T:Org.BouncyCastle.Security.GeneralSecurityException">Signature failure on database file</exception>
            <exception cref="T:System.ApplicationException">Certificate not revoked:  + serialNumber</exception>
        </member>
        <member name="M:OSCA.Offline.Database.GetCertificateStatus(Org.BouncyCastle.Math.BigInteger,System.String)">
            <summary>
            Find the status of a certificate
            </summary>
            <param name="SerialNumber">Certificate serial number</param>
            <param name="DbFileLocation">DB file location</param>
            <returns>Certificate status</returns>
            <exception cref="T:System.ApplicationException">Certificate not found</exception>
            <exception cref="T:System.ApplicationException">Duplicate certificate</exception>
            <exception cref="T:System.ApplicationException">Invalid status value</exception>
        </member>
        <member name="M:OSCA.Offline.Database.GetCertificateStatus(System.String,System.String)">
            <summary>
            Find the status of a certificate
            </summary>
            <param name="SerialNumber">Certificate serial number</param>
            <param name="DbFileLocation">DB file location</param>
            <returns>Certificate status</returns>
            <exception cref="T:System.ApplicationException">Certificate not found</exception>
            <exception cref="T:System.ApplicationException">Duplicate certificate</exception>
            <exception cref="T:System.ApplicationException">Invalid status value</exception>
        </member>
        <member name="M:OSCA.Offline.Database.PopulateCRL(Org.BouncyCastle.X509.X509V2CrlGenerator,System.String)">
            <summary>
            Populate a CRL object with revocation entries
            </summary>
            <param name="Crl">Reference to to CRL object</param>
            <param name="DbFileLocation">Loaction of the CA Database file</param>
        </member>
        <member name="M:OSCA.Offline.Database.ExpireCertificate(System.String,Org.BouncyCastle.X509.X509Certificate,System.Security.Cryptography.CspParameters)">
            <summary>
            Check the CA Database and mark expired certificates
            </summary>
            <param name="DbFileLocation">Location of CA DB file</param>
            <param name="caCert">The ca cert.</param>
            <param name="cspParam">The CSP parameter.</param>
            <returns></returns>
            <exception cref="T:Org.BouncyCastle.Security.GeneralSecurityException">Signature failure on database file</exception>
        </member>
        <member name="T:OSCA.Offline.Database.CertStatus">
            <summary>
            Status of a certificate
            </summary>
        </member>
        <member name="F:OSCA.Offline.Database.CertStatus.Current">
            <summary>
            Not expired or revoked
            </summary>
        </member>
        <member name="F:OSCA.Offline.Database.CertStatus.Expired">
            <summary>
            Expired
            </summary>
        </member>
        <member name="F:OSCA.Offline.Database.CertStatus.Revoked">
            <summary>
            Revoked
            </summary>
        </member>
        <member name="T:OSCA.Policy.CertificatePoliciesPolicy">
            <summary>
            Validate that the proposed certificate contains the certificate policy
            </summary>
        </member>
        <member name="T:OSCA.Profile.freshestCRL">
            <summary>
            Freshest CRL extension
            </summary>
            <remarks>ASN.1 description from RFC 5280
            <code>
            id-ce-freshestCRL OBJECT IDENTIFIER ::=  { id-ce 46 }
            
            FreshestCRL ::= CRLDistributionPoints
            
            CRLDistributionPoints ::= SEQUENCE SIZE (1..MAX) OF DistributionPoint
            
            DistributionPoint ::= SEQUENCE {
                distributionPoint       [0]     DistributionPointName OPTIONAL,
                reasons                 [1]     ReasonFlags OPTIONAL,
                cRLIssuer               [2]     GeneralNames OPTIONAL }
                
            DistributionPointName ::= CHOICE {
                fullName                [0]     GeneralNames,
                nameRelativeToCRLIssuer [1]     RelativeDistinguishedName }
                
            ReasonFlags ::= BIT STRING {
                unused                  (0),
                keyCompromise           (1),
                cACompromise            (2),
                affiliationChanged      (3),
                superseded              (4),
                cessationOfOperation    (5),
                certificateHold         (6),
                privilegeWithdrawn      (7),
                aACompromise            (8) }
            </code>
            Note that this class does not support reasons or cRLIssuer in the DistributionPoint
            </remarks>
        </member>
        <member name="M:OSCA.Profile.freshestCRL.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OSCA.Profile.freshestCRL"/> class.
            </summary>
        </member>
        <member name="M:OSCA.Profile.freshestCRL.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:OSCA.Profile.freshestCRL"/> class.
            </summary>
            <param name="Critical">True = Critical, False = Not Critical</param>
        </member>
        <member name="M:OSCA.Profile.freshestCRL.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:OSCA.Profile.freshestCRL"/> class.
            </summary>
            <param name="xml">XML version of the extension</param>
            <remarks>
            Sample OSCA XML description of the extension:
            <code>
            &lt;Extension&gt;
                &lt;name description="Freshest CRL"&gt;FreshestCRL&lt;/name&gt;
                &lt;critical&gt;true&lt;/critical&gt;
                &lt;value&gt;
                    &lt;cdp&gt;
                        &lt;name type="uniformResourceIdentifier"&gt;http://crl.foo.org/wotsit.crl&lt;/name&gt;
                    &lt;/cdp&gt;
                    &lt;cdp&gt;
                        &lt;name type="uniformResourceIdentifier"&gt;http://www.bar.org/wotsit.crl&lt;/name&gt;
                    &lt;/cdp&gt;
                &lt;/value&gt;
            &lt;/Extension&gt;
            </code>
            </remarks>
        </member>
        <member name="M:OSCA.Profile.freshestCRL.#ctor(Org.BouncyCastle.Asn1.X509.X509Extension)">
            <summary>
            Create FreshestCRL extension from X509Extension
            </summary>
            <param name="Extension"></param>
        </member>
        <member name="P:OSCA.Profile.freshestCRL.FreshestCRL">
            <summary>
            DER encoded value of FreshestCRL
            </summary>
        </member>
        <member name="T:OSCA.Crypto.SysKeyManager">
            <summary>
            Class that manages keypairs using the system crypto library
            </summary>
        </member>
        <member name="M:OSCA.Crypto.SysKeyManager.Create(System.Int32,System.String,System.String)">
            <summary>
            Create a key pair
            </summary>
            <param name="pkSize">Key size</param>
            <param name="pkAlgo">Key algorithm</param>
            <param name="name">Key container name</param>
            <returns></returns>
        </member>
        <member name="M:OSCA.Crypto.SysKeyManager.Create(System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Create a key pair
            </summary>
            <param name="pkSize">Key size</param>
            <param name="cspName">Name of the CSP.</param>
            <param name="cspNum">The CSP number.</param>
            <param name="name">Key container name</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Algorithm not supported</exception>
        </member>
        <member name="M:OSCA.Crypto.SysKeyManager.ImportFromP12(System.Byte[],System.String,System.String,System.Char[])">
            <summary>
            Import key and certificate from a PKCS#12 file.
            </summary>
            <param name="P12">The PKCS#12 file</param>
            <param name="pkAlgo">The public key algorithm</param>
            <param name="name">The certificate name</param>
            <param name="password">The decryption password</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Algorithm not supported</exception>
        </member>
        <member name="T:OSCA.Pkcs10Parser">
            <summary>
            Generic PKCS#10 parser
            </summary>
        </member>
        <member name="M:OSCA.Pkcs10Parser.#ctor(System.Byte[],System.Boolean)">
            <summary>
            Create a PKCS#10 Parser using a byte[]
            </summary>
            <param name="Request">byte[] containing request</param>
            <param name="Verify">if set to <c>true</c> verify the signature using the public key in the request.</param>
            <exception cref="T:Org.BouncyCastle.Security.SignatureException">POP test failed</exception>
        </member>
        <member name="M:OSCA.Pkcs10Parser.#ctor(Org.BouncyCastle.Utilities.IO.Pem.PemObject,System.Boolean)">
            <summary>
            Create a PKCS#10 Parser using a PEM object
            </summary>
            <param name="Request">PEM object containing request</param>
            <param name="Verify">if set to <c>true</c> verify the signature using the public key in the request.</param>
            <exception cref="T:Org.BouncyCastle.Security.SignatureException">POP test failed</exception>
        </member>
        <member name="M:OSCA.Pkcs10Parser.#ctor(Org.BouncyCastle.Asn1.Asn1Sequence,System.Boolean)">
            <summary>
            Create a PKCS#10 Parser using an Asn1Sequence
            </summary>
            <param name="Sequence">Asn1Sequence containing request</param>
            <param name="Verify">if set to <c>true</c> verify the signature using the public key in the request.</param>
            <exception cref="T:Org.BouncyCastle.Security.SignatureException">POP test failed</exception>
        </member>
        <member name="M:OSCA.Pkcs10Parser.#ctor(Org.BouncyCastle.Pkcs.Pkcs10CertificationRequest,System.Boolean)">
            <summary>
            Create a PKCS#10 Parser using a Pkcs10CertificationRequest object
            </summary>
            <param name="Request">Pkcs10CertificationRequest object</param>
            <param name="Verify">if set to <c>true</c> verify the signature using the public key in the request.</param>
            <exception cref="T:Org.BouncyCastle.Security.SignatureException">POP test failed</exception>
        </member>
        <member name="M:OSCA.Pkcs10Parser.IsCritical(Org.BouncyCastle.Asn1.DerObjectIdentifier)">
            <summary>
            State criticality of an extension
            </summary>
            <param name="oid">OID of extension</param>
            <returns>True=Critical, false=Noncritical</returns>
        </member>
        <member name="M:OSCA.Pkcs10Parser.ToString">
            <summary>
            Describe the PKCS#10 request
            </summary>
            <returns>String description of the PKCS#10 request</returns>
        </member>
        <member name="M:OSCA.Pkcs10Parser.ReadRequestFromFile(System.String)">
            <summary>
            Read a request file and return a PKCS10Parser instance
            </summary>
            <param name="fileName">File containing request</param>
            <returns>
            PKCS10Parser instance with the request loaded
            </returns>
            <exception cref="T:System.ApplicationException">
            PEM file does not contain a request
            or
            File does not contain a request
            </exception>
        </member>
        <member name="M:OSCA.Pkcs10Parser.ReadRequestFromString(System.String)">
            <summary>
            Read a request from a string and return a PKCS10Parser instance
            </summary>
            <param name="Request">The request.</param>
            <returns>
            PKCS10Parser instance with the request loaded
            </returns>
            <exception cref="T:System.ApplicationException">PEM string does not contain a request
            or
            String does not contain a request</exception>
        </member>
        <member name="M:OSCA.Pkcs10Parser.FindExtension(System.String)">
            <summary>
            Find an OSCA extension
            </summary>
            <param name="ExtensionName">Extension name</param>
            <returns>The extension or null</returns>
        </member>
        <member name="M:OSCA.Pkcs10Parser.getSubjectAltNames">
            <summary>
            Get a GeneralNames object containing the SubjectAltNames
            </summary>
            <returns>Subject Alt Names (or null)</returns>
        </member>
        <member name="M:OSCA.Pkcs10Parser.getExtensions">
            <summary>
            Get an X509Extensions object containing all extensions from the request
            </summary>
            <returns>List of extension (or null)</returns>
        </member>
        <member name="M:OSCA.Pkcs10Parser.skidTest">
            <summary>
            If there is a SKID extension make sure the content is the hash of the public key
            </summary>
            <returns></returns>
        </member>
        <member name="P:OSCA.Pkcs10Parser.Subject">
            <summary>
            Subject Name
            </summary>
        </member>
        <member name="P:OSCA.Pkcs10Parser.Extensions">
            <summary>
            X509 Extensions
            </summary>
        </member>
        <member name="P:OSCA.Pkcs10Parser.OscaExtensions">
            <summary>
            OSCA Extensions
            </summary>
        </member>
        <member name="P:OSCA.Pkcs10Parser.SubjectAltNames">
            <summary>
            Subject Alternative Names
            </summary>
        </member>
        <member name="P:OSCA.Pkcs10Parser.SubjAltNames">
            <summary>
            Subject Alternative Names
            </summary>
        </member>
        <member name="P:OSCA.Pkcs10Parser.Version">
            <summary>
            PKCS#10 version number
            </summary>
        </member>
        <member name="P:OSCA.Pkcs10Parser.SubjectPublicKeyInfo">
            <summary>
            Subject Public Key Information
            </summary>
        </member>
        <member name="P:OSCA.Pkcs10Parser.SubjectPublicKeyDescription">
            <summary>
            A string describing the public key
            </summary>
        </member>
        <member name="P:OSCA.Pkcs10Parser.SubjectPublicKeyParams">
            <summary>
            Object containing the parameters of the public key
            </summary>
        </member>
        <member name="P:OSCA.Pkcs10Parser.SubjectKeyIDisValid">
            <summary>
            Gets a value indicating whether the Subject Key ID is valid.
            </summary>
            <value>
            <c>true</c> if Subject Key ID matches public key; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:OSCA.Pkcs10Parser.SignatureAlgorithm">
            <summary>
            Signature Algorithm Information
            </summary>
        </member>
        <member name="P:OSCA.Pkcs10Parser.SignatureAlgorithmDescription">
            <summary>
            String describing the signature algorithm
            </summary>
        </member>
        <member name="P:OSCA.Pkcs10Parser.PublicKey">
            <summary>
            Public Key value
            </summary>
        </member>
        <member name="P:OSCA.Pkcs10Parser.AttributesSet">
            <summary>
            All of the attributes
            </summary>
        </member>
        <member name="P:OSCA.Pkcs10Parser.Attributes">
            <summary>
            All of the attributes as a dictionary
            </summary>
        </member>
        <member name="P:OSCA.Pkcs10Parser.FileType">
            <summary>
            Gets the type of the file.
            </summary>
            <value>
            The type of the file.
            </value>
        </member>
        <member name="P:OSCA.Pkcs10Parser.Request">
            <summary>
            Gets the request.
            </summary>
            <value>
            The request.
            </value>
        </member>
        <member name="T:OSCA.Profile.prevCaCertHash">
            <summary>
            CA Version extension (MS)
            </summary>
            <remarks>   
            Microsoft private CA Version extension. This refers to the version of the CA key and appears to be used to identify the correct CRL to use.
            </remarks>
        </member>
        <member name="M:OSCA.Profile.prevCaCertHash.#ctor">
            <summary>
            Create PrevCaCertHash extension
            </summary>
        </member>
        <member name="M:OSCA.Profile.prevCaCertHash.#ctor(System.Boolean)">
            <summary>
            Create PrevCaCertHash extension
            </summary>
            <param name="Critical">True = Critical, False = Not Critical</param>
        </member>
        <member name="M:OSCA.Profile.prevCaCertHash.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Create CaVersion extension from XML profile file entry
            </summary>
            <param name="xml">OSCA XML description of the extension</param>
            <remarks>Sample OSCA XML description of the PrevCaCertHash extension:
            <code>
             &lt;Extension&gt;
               &lt;name description="Previous CA Certificate Hash"&gt;PrevCaCertHash&lt;/name&gt;
               &lt;critical&gt;false&lt;/critical&gt;
               &lt;value&gt;
                   &lt;hash&gt;01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16&lt;/hash&gt;
               &lt;/value&gt;
             &lt;/Extension&gt;
            </code> 
            </remarks>
        </member>
        <member name="M:OSCA.Profile.prevCaCertHash.#ctor(Org.BouncyCastle.Asn1.X509.X509Extension)">
            <summary>
            Create CaVersion extension from X509Extension
            </summary>
            <param name="Extension">X509Extension instance</param>
        </member>
        <member name="M:OSCA.Profile.prevCaCertHash.ToXml">
            <summary>
            Provide an XML version of the extension
            </summary>
            <returns>XML encoding of the extension</returns>
            <remarks>Sample OSCA XML description of the PrevCaCertHash extension:
            <code>
             &lt;Extension&gt;
               &lt;name description="Previous CA Certificate Hash"&gt;PrevCaCertHash&lt;/name&gt;
               &lt;critical&gt;false&lt;/critical&gt;
               &lt;value&gt;
                   &lt;hash&gt;01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16&lt;/hash&gt;
               &lt;/value&gt;
             &lt;/Extension&gt;
            </code> 
            </remarks>
        </member>
        <member name="M:OSCA.Profile.prevCaCertHash.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that describes this extension
            </summary>
            <returns>
            A <see cref="T:System.String"/> that describes this extension
            </returns>
        </member>
        <member name="M:OSCA.Profile.prevCaCertHash.encode">
            <summary>
            Encodes this instance.
            </summary>
        </member>
        <member name="P:OSCA.Profile.prevCaCertHash.CAVersion">
            <summary>
            DER encoded value of CaVersion
            </summary>
        </member>
        <member name="P:OSCA.Profile.prevCaCertHash.DerEncoding">
            <summary>
            DER encoded value of extension
            </summary>
        </member>
        <member name="P:OSCA.Profile.prevCaCertHash.Hash">
            <summary>
            Previous CA Certificate Hash
            </summary>
        </member>
        <member name="P:OSCA.Profile.prevCaCertHash.Value">
            <summary>
            Digest string describing the extension
            </summary>
        </member>
        <member name="T:OSCA.Crypto.Pkcs7">
            <summary>
            Static class containing tools to handle PKCS#7 objects
            </summary>
        </member>
        <member name="M:OSCA.Crypto.Pkcs7.Create(System.Collections.ArrayList,System.Collections.ArrayList)">
            <summary>
            Returns a new PKCS#7 instance containing certificates and (optionally CRLs)
            </summary>
            <param name="CertificateList">The certificate list.</param>
            <param name="CrlList">The CRL list.</param>
            <returns>
            PKCS#7 instance
            </returns>
            <exception cref="T:System.ArgumentException">No input</exception>
        </member>
        <member name="T:OSCA.Crypto.BcV3CertGen">
            <summary>
            A class to Generate Version 3 X509Certificates.
            <remarks>
            This is modified from the BC original (X509CertificateGenerator) to:
            <para>
             + Accept pre-defined X509Extensions (from a request)
             </para>
             <para>
             + Accept an OSCA profile describing extensions
             </para>
             </remarks>
            </summary>
        </member>
        <member name="M:OSCA.Crypto.BcV3CertGen.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OSCA.Crypto.BcV3CertGen"/> class.
            </summary>
        </member>
        <member name="M:OSCA.Crypto.BcV3CertGen.Generate(Org.BouncyCastle.Crypto.AsymmetricKeyParameter)">
            <summary>
            Generate an X509Certificate.
            </summary>
            <param name="privateKey">The private key of the issuer that is signing this certificate.</param>
            <returns>An X509Certificate.</returns>
        </member>
        <member name="M:OSCA.Crypto.BcV3CertGen.Generate(Org.BouncyCastle.Crypto.AsymmetricKeyParameter,Org.BouncyCastle.Asn1.X509.X509Extensions)">
            <summary>
            Generate an X509Certificate.
            </summary>
            <param name="privateKey">The private key of the issuer that is signing this certificate.</param>
            <param name="Extensions">Set of extensions to include in the certificate.</param>
            <returns>
            An X509Certificate.
            </returns>
            <exception cref="T:OSCA.Policy.PolicyEnforcementException">CA policy violation</exception>
            <exception cref="T:Org.BouncyCastle.Security.Certificates.CertificateEncodingException">
            Exception encoding TBS cert
            or
            Exception producing certificate object
            </exception>
        </member>
        <member name="M:OSCA.Crypto.BcV3CertGen.Generate(Org.BouncyCastle.Crypto.AsymmetricKeyParameter,OSCA.Profile.Profile,System.DateTime,System.DateTime)">
            <summary>
            Generate an X509Certificate.
            </summary>
            <param name="privateKey">The private key of the issuer that is signing this certificate.</param>
            <param name="Profile">OSCA profile.</param>
            <param name="Start">Start date</param>
            <returns>
            An X509Certificate.
            </returns>
            <exception cref="T:OSCA.Policy.PolicyEnforcementException">CA policy violation</exception>
            <exception cref="T:Org.BouncyCastle.Security.Certificates.CertificateEncodingException">Exception encoding TBS cert
            or
            Exception producing certificate object</exception>
        </member>
        <member name="P:OSCA.Crypto.BcV3CertGen.SignatureAlgNames">
            <summary>
            Allows enumeration of the signature names supported by the generator.
            </summary>
        </member>
        <member name="T:OSCA.Profile.CertPolicy">
            <summary>
            Certificate policy description
            </summary>
        </member>
        <member name="F:OSCA.Profile.CertPolicy.Oid">
            <summary>
            Policy OID
            </summary>
        </member>
        <member name="F:OSCA.Profile.CertPolicy.Cps">
            <summary>
            URI of the CPS
            </summary>
        </member>
        <member name="F:OSCA.Profile.CertPolicy.Unotice">
            <summary>
            User notice
            </summary>
        </member>
        <member name="F:OSCA.Profile.CertPolicy.Name">
            <summary>
            Policy name
            </summary>
        </member>
        <member name="T:OSCA.Profile.certificatePolicies">
             <summary>
             Certificate Policies extension
             </summary>
             <remarks>
             ASN.1 description of extension from RFC 5280:
             <code>
             id-ce-certificatePolicies OBJECT IDENTIFIER ::=  { id-ce 32 }
             
             anyPolicy OBJECT IDENTIFIER ::= { id-ce-certificate-policies 0 }
             
             certificatePolicies ::= SEQUENCE SIZE (1..MAX) OF PolicyInformation
             
             PolicyInformation ::= SEQUENCE {
                 policyIdentifier   CertPolicyId,
                 policyQualifiers   SEQUENCE SIZE (1..MAX) OF
                 PolicyQualifierInfo OPTIONAL }
                 
             CertPolicyId ::= OBJECT IDENTIFIER
            
             PolicyQualifierInfo ::= SEQUENCE {
                 policyQualifierId  PolicyQualifierId,
                 qualifier          ANY DEFINED BY policyQualifierId }
                 
             -- policyQualifierIds for Internet policy qualifiers
             
             id-qt          OBJECT IDENTIFIER ::=  { id-pkix 2 }
             id-qt-cps      OBJECT IDENTIFIER ::=  { id-qt 1 }
             id-qt-unotice  OBJECT IDENTIFIER ::=  { id-qt 2 }
             
             PolicyQualifierId ::=
                 OBJECT IDENTIFIER ( id-qt-cps | id-qt-unotice )
                 
             Qualifier ::= CHOICE {
                 cPSuri           CPSuri,
                 userNotice       UserNotice }
                 
             CPSuri ::= IA5String
            
             UserNotice ::= SEQUENCE {
                 noticeRef        NoticeReference OPTIONAL,
                 explicitText     DisplayText OPTIONAL}
                 
             NoticeReference ::= SEQUENCE {
                 organization     DisplayText,
                 noticeNumbers    SEQUENCE OF INTEGER }
                 
             DisplayText ::= CHOICE {
                 ia5String        IA5String      (SIZE (1..200)),
                 visibleString    VisibleString  (SIZE (1..200)),
                 bmpString        BMPString      (SIZE (1..200)),
                 utf8String       UTF8String     (SIZE (1..200)) }
            </code>
             </remarks>
        </member>
        <member name="M:OSCA.Profile.certificatePolicies.#ctor">
            <summary>
            Create CertificatePolicies extension
            </summary>
        </member>
        <member name="M:OSCA.Profile.certificatePolicies.#ctor(System.Boolean)">
            <summary>
            Create CertificatePolicies extension using supplied values
            </summary>
            <param name="Critical">True = Critical, False = Not Critical</param>
        </member>
        <member name="M:OSCA.Profile.certificatePolicies.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Create CertificatePolicies extension from XML profile file entry
            </summary>
            <remarks>
            Sample OSCA XML description of the CertificatePolicies extension:
            <code>
            &lt;Extension&gt;
                &lt;name description="Certificate Policies"&gt;CertificatePolicies&lt;/name&gt;
                &lt;critical&gt;false&lt;/critical&gt;
                &lt;value&gt;
                    &lt;policyInfo&gt;
                        &lt;oid&gt;1.2.3.4&lt;/oid&gt;
                        &lt;cps&gt;http://foo.bar.com/cps.html&lt;/cps&gt;
                        --&gt; &lt;unotice&gt;&lt;/unotice&gt;
                        &lt;name&gt;MediumAssurance&lt;/name&gt;
                    &lt;/policyInfo&gt;
                &lt;/value&gt;
            &lt;/Extension&gt;
            </code>
            </remarks>
            <param name="xml">XML version of the extension</param>
        </member>
        <member name="M:OSCA.Profile.certificatePolicies.#ctor(Org.BouncyCastle.Asn1.X509.X509Extension)">
            <summary>
            Create CertificatePolicies extension from an X509Extension
            </summary>
            <param name="Extension">X509 extension</param>
        </member>
        <member name="M:OSCA.Profile.certificatePolicies.Add(OSCA.Profile.CertPolicy)">
            <summary>
            Add a new CertPolicy to the extension
            </summary>
            <param name="Policy">Certificate policy</param>
        </member>
        <member name="M:OSCA.Profile.certificatePolicies.Remove(OSCA.Profile.CertPolicy)">
            <summary>
            Remove a CertPolicy from the extension
            </summary>
            <param name="Policy">Certificate policy</param>
        </member>
        <member name="M:OSCA.Profile.certificatePolicies.ToXml">
            <summary>
            Provide an XML version of the extension
            </summary>
            <remarks>
            Sample OSCA XML description of the CertificatePolicies extension:
            <code>
            &lt;Extension&gt;
                &lt;name description="Certificate Policies"&gt;CertificatePolicies&lt;/name&gt;
                &lt;critical&gt;false&lt;/critical&gt;
                &lt;value&gt;
                    &lt;policyInfo&gt;
                        &lt;oid&gt;1.2.3.4&lt;/oid&gt;
                        &lt;cps&gt;http://foo.bar.com/cps.html&lt;/cps&gt;
                        --&gt; &lt;unotice&gt;&lt;/unotice&gt;
                        &lt;name&gt;MediumAssurance&lt;/name&gt;
                    &lt;/policyInfo&gt;
                &lt;/value&gt;
            &lt;/Extension&gt;
            </code>
            </remarks>
            <returns>XML encoding of the extension</returns>
        </member>
        <member name="M:OSCA.Profile.certificatePolicies.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that describes this extension
            </summary>
            <returns>
            A <see cref="T:System.String"/> that describes this extension
            </returns>
        </member>
        <member name="P:OSCA.Profile.certificatePolicies.CertPolicies">
            <summary>
            List of certificate policies
            </summary>
        </member>
        <member name="P:OSCA.Profile.certificatePolicies.CertificatePolicies">
            <summary>
            DER encoded value of CertificatePolicies
            </summary>
        </member>
        <member name="P:OSCA.Profile.certificatePolicies.DerEncoding">
            <summary>
            DER encoded value of extension
            </summary>
        </member>
        <member name="T:OSCA.Crypto.SysSigner">
            <summary>
            
            </summary>
        </member>
        <member name="T:OSCA.Crypto.CNG.CngKeyManager">
            <summary>
            Class that manages keypairs using the system CNG crypto library
            </summary>
            <remarks>Only EC keypairs are supported</remarks>
        </member>
        <member name="M:OSCA.Crypto.CNG.CngKeyManager.Create(System.Security.Cryptography.CngAlgorithm,System.String)">
            <summary>
            Create a CNG keypair
            </summary>
            <param name="pkAlgo">Key algorithm (from supported set)</param>
            <param name="name">Key container name</param>
            <returns>
            CNG keypair
            </returns>
            <exception cref="T:System.NotSupportedException">Creation of key not supported for:  + pkAlgo.Algorithm</exception>
            <remarks>
            Keys are exportable
            </remarks>
        </member>
        <member name="M:OSCA.Crypto.CNG.CngKeyManager.ImportFromP12(System.Byte[],System.String,System.String,System.Char[])">
            <summary>
            Import key and certificate from a PKCS#12 file.
            </summary>
            <param name="P12">The PKCS#12 file</param>
            <param name="pkAlgo">The public key algorithm</param>
            <param name="name">The certificate name</param>
            <param name="password">The decryption password</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Algorithm not supported</exception>
        </member>
        <member name="T:OSCA.Profile.NameConstraintTree">
            <summary>
            Types of name constraints
            </summary>
        </member>
        <member name="F:OSCA.Profile.NameConstraintTree.Permitted">
            <summary>
            Permitted names
            </summary>
        </member>
        <member name="F:OSCA.Profile.NameConstraintTree.Excluded">
            <summary>
            Prohibited names
            </summary>
        </member>
        <member name="T:OSCA.Profile.nameConstraints">
             <summary>
             Name Constraints extension
             </summary>
             <remarks>
             ASN.1 description from RFC5280:
             <code>
             id-ce-nameConstraints OBJECT IDENTIFIER ::=  { id-ce 30 }
             
             NameConstraints ::= SEQUENCE {
                permittedSubtrees       [0]     GeneralSubtrees OPTIONAL,
                excludedSubtrees        [1]     GeneralSubtrees OPTIONAL }
                
             GeneralSubtrees ::= SEQUENCE SIZE (1..MAX) OF GeneralSubtree
            
             GeneralSubtree ::= SEQUENCE {
                base                    GeneralName,
                minimum         [0]     BaseDistance DEFAULT 0,
                maximum         [1]     BaseDistance OPTIONAL }
                
             BaseDistance ::= INTEGER (0..MAX)
             </code>
             </remarks>
        </member>
        <member name="M:OSCA.Profile.nameConstraints.#ctor">
            <summary>
            Create NameConstraints extension
            </summary>
        </member>
        <member name="M:OSCA.Profile.nameConstraints.#ctor(System.Boolean)">
            <summary>
            Create NameConstraints extension
            </summary>
            <param name="Critical">True = Critical, False = Not Critical</param>
        </member>
        <member name="M:OSCA.Profile.nameConstraints.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Create NameConstraints extension from XML profile file entry
            </summary>
            <param name="xml">XML version of the extension</param>
            <remarks>Sample OSCA XML description of the NameConstraints extension:
            <code>
             &lt;Extension&gt;
               &lt;name description="Name Constraints"&gt;NameConstraints&lt;/name&gt;
               &lt;critical&gt;false&lt;/critical&gt;
               &lt;value&gt;
                  &lt;permitted&gt;
                    &lt;name type="rfc822Name"&gt;*.foo.org&lt;/name&gt;
                  &lt;/permitted&gt;
                  &lt;excluded&gt;
                    &lt;name type="dNSName"&gt;*.bar.net&lt;/name&gt;
                  &lt;/excluded&gt;
               &lt;/value&gt;
             &lt;/Extension&gt;
            </code> 
            </remarks> 
        </member>
        <member name="M:OSCA.Profile.nameConstraints.#ctor(Org.BouncyCastle.Asn1.X509.X509Extension)">
            <summary>
            Create NameConstraints extension from an X509Extension
            </summary>
            <param name="Extension">X509Extension</param>
            <remarks>
            Sub classses must provide an implementation to decode their values
            </remarks>
        </member>
        <member name="M:OSCA.Profile.nameConstraints.ToXml">
            <summary>
            Provide an XML version of the extension
            </summary>
            <returns>XML encoding of the extension</returns>
            <remarks>Sample OSCA XML description of the NameConstraints extension:
            <code>
             &lt;Extension&gt;
               &lt;name description="Name Constraints"&gt;NameConstraints&lt;/name&gt;
               &lt;critical&gt;false&lt;/critical&gt;
               &lt;value&gt;
                  &lt;permitted&gt;
                    &lt;name type="rfc822Name"&gt;*.foo.org&lt;/name&gt;
                  &lt;/permitted&gt;
                  &lt;excluded&gt;
                    &lt;name type="dNSName"&gt;*.bar.net&lt;/name&gt;
                  &lt;/excluded&gt;
               &lt;/value&gt;
             &lt;/Extension&gt;
            </code> 
            </remarks> 
        </member>
        <member name="M:OSCA.Profile.nameConstraints.Add(OSCA.Profile.NameConstraintTree,OSCA.OSCAGeneralName)">
            <summary>
            Add a name
            </summary>
            <param name="Tree">Exclude or included</param>
            <param name="Name">Name to add</param>
        </member>
        <member name="M:OSCA.Profile.nameConstraints.Remove(OSCA.Profile.NameConstraintTree,OSCA.OSCAGeneralName)">
            <summary>
            Remove a name
            </summary>
            <param name="Tree">Exclude or include</param>
            <param name="Name">Name to remove</param>
        </member>
        <member name="M:OSCA.Profile.nameConstraints.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that describes this extension
            </summary>
            <returns>
            A <see cref="T:System.String"/> that describes this extension
            </returns>
        </member>
        <member name="P:OSCA.Profile.nameConstraints.Permitted">
            <summary>
            List of permitted namespaces
            </summary>
        </member>
        <member name="P:OSCA.Profile.nameConstraints.Excluded">
            <summary>
            List of excluded namespaces
            </summary>
        </member>
        <member name="P:OSCA.Profile.nameConstraints.NameConstraint">
            <summary>
            DER encoded value of NameConstraints
            </summary>
        </member>
        <member name="P:OSCA.Profile.nameConstraints.DerEncoding">
            <summary>
            DER encoded value of extension
            </summary>
        </member>
        <member name="T:OSCA.Offline.fipsCA">
            <summary>
            A basic implementation of a Certification Authority using FIPS 140 (System) crypto
            </summary>
        </member>
        <member name="M:OSCA.Offline.fipsCA.#ctor(System.String)">
            <summary>
            Construct a CA object
            </summary>
            <param name="ConfigFile">Full pathname to config file</param>
        </member>
        <member name="M:OSCA.Offline.fipsCA.Backup(System.String,System.String)">
            <summary>
            Backup the CA key material to a PKCS#12 file
            </summary>
            <param name="Password">Strong password used for encryption</param>
            <param name="OutputFile">Full pathname to the PKCS#12 output file</param>
        </member>
        <member name="M:OSCA.Offline.fipsCA.generate(OSCA.Crypto.ICertGen,OSCA.Profile.Profile,System.DateTime,System.DateTime)">
            <summary>
            Generates the certificate.
            </summary>
            <param name="gen">The generator.</param>
            <param name="profile">The profile.</param>
            <param name="notBefore"></param>
            <param name="notAfter"></param>
            <returns></returns>
        </member>
        <member name="M:OSCA.Offline.fipsCA.generate(OSCA.Crypto.ICertGen)">
            <summary>
            Generate a certificate
            </summary>
            <remarks>All extensions in request will be included in the certificate</remarks>
            <param name="gen">Certificate generator instance</param>
            <returns>New certificate</returns>
        </member>
        <member name="M:OSCA.Offline.fipsCA.generate(OSCA.Crypto.ICertGen,Org.BouncyCastle.Asn1.X509.X509Extensions)">
            <summary>
            Generate a certificate
            </summary>
            <remarks>Only the extensions supplied will be included in the certificate</remarks>
            <param name="gen">Certificate generator instance</param>
            <param name="ext">Extensions to include in the certificate</param>
            <returns>New certificate</returns>
        </member>
        <member name="M:OSCA.Offline.fipsCA.IssueCRL">
            <summary>
            Issue a CRL (containing all revoked certificates)
            </summary>
            <returns>CRL number</returns>
        </member>
        <member name="T:OSCA.Log.Logger">
            <summary>
            OSCA Event logger
            </summary>
        </member>
        <member name="M:OSCA.Log.Logger.#ctor(System.String,Org.BouncyCastle.X509.X509Certificate,System.Security.Cryptography.CspParameters)">
            <summary>
            Constructor
            </summary>
            <remarks>Opens the event log and verifies the signature</remarks>
            <param name="logFile">Pathname of logfile</param>
            <param name="cert">Signing certificate</param>
            <param name="cspParam">Signing key</param>
        </member>
        <member name="M:OSCA.Log.Logger.writeEvent(System.String,System.String)">
            <summary>
            Write an event to the logfile
            </summary>
            <param name="id">Event type</param>
            <param name="message">Log message</param>
        </member>
        <member name="T:OSCA.CRLReason">
            <summary>
            RFC 5280 revocation reasons
            </summary>
        </member>
        <member name="F:OSCA.CRLReason.unused">
            <summary>
            Reasons unused or undefined
            </summary>
        </member>
        <member name="F:OSCA.CRLReason.keyCompromise">
            <summary>
            Entity key has been compromised
            </summary>
        </member>
        <member name="F:OSCA.CRLReason.cACompromise">
            <summary>
            Issuing CA key compromised
            </summary>
        </member>
        <member name="F:OSCA.CRLReason.affiliationChanged">
            <summary>
            Entity affiliation has changed
            </summary>
        </member>
        <member name="F:OSCA.CRLReason.supersede">
            <summary>
            Certificate superseded
            </summary>
        </member>
        <member name="F:OSCA.CRLReason.cessationOfOperation">
            <summary>
            Certificate permamently out of use
            </summary>
        </member>
        <member name="F:OSCA.CRLReason.certificateHold">
            <summary>
            Certificate temporarily out of use
            </summary>
        </member>
        <member name="T:OSCA.CrlReason">
            <summary>
            Class to access revocation reason codes
            </summary>
        </member>
        <member name="M:OSCA.CrlReason.GetReason(System.String)">
            <summary>
            Get string associated with a revocation reason code
            </summary>
            <param name="ReasonCode">String containing numeric reason code</param>
            <returns>String translation of the reason code</returns>
        </member>
        <member name="M:OSCA.CrlReason.GetReason(OSCA.CRLReason)">
            <summary>
            Get string associated with a revocation reason code
            </summary>
            <param name="ReasonCode">CRLReason enum value</param>
            <returns>String translation of the reason code</returns>
        </member>
        <member name="T:OSCA.GenName">
            <summary>
            Types of GeneralName
            </summary>
        </member>
        <member name="F:OSCA.GenName.otherName">
            <summary>
            Other name
            </summary>
        </member>
        <member name="F:OSCA.GenName.rfc822Name">
            <summary>
            RFC822 name
            </summary>
        </member>
        <member name="F:OSCA.GenName.dNSName">
            <summary>
            DNS name
            </summary>
        </member>
        <member name="F:OSCA.GenName.x400Address">
            <summary>
            X4.400 address
            </summary>
        </member>
        <member name="F:OSCA.GenName.directoryName">
            <summary>
            Directory name
            </summary>
        </member>
        <member name="F:OSCA.GenName.ediPartyName">
            <summary>
            EDI party name
            </summary>
        </member>
        <member name="F:OSCA.GenName.uniformResourceIdentifier">
            <summary>
            URI
            </summary>
        </member>
        <member name="F:OSCA.GenName.iPAddress">
            <summary>
            IP address
            </summary>
        </member>
        <member name="F:OSCA.GenName.registeredID">
            <summary>
            Registered ID
            </summary>
        </member>
        <member name="T:OSCA.OSCAGeneralName">
            <summary>
            OSCA General Name type
            </summary>
        </member>
        <member name="F:OSCA.OSCAGeneralName.Type">
            <summary>
            Type of name
            </summary>
        </member>
        <member name="F:OSCA.OSCAGeneralName.Name">
            <summary>
            Name
            </summary>
        </member>
        <member name="M:OSCA.OSCAGeneralName.#ctor(Org.BouncyCastle.Asn1.X509.GeneralName)">
            <summary>
            Initializes a new instance of the <see cref="T:OSCA.OSCAGeneralName"/> struct.
            </summary>
            <param name="genName">BC general name</param>
        </member>
        <member name="M:OSCA.OSCAGeneralName.GetGeneralName">
            <summary>
            OSCA GeneralName as a BC GeneralName.
            </summary>
            <returns>BC GeneralName</returns>
        </member>
        <member name="M:OSCA.OSCAGeneralName.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:OSCA.Offline.dhTA">
            <summary>
            A basic implementation of a Diffie-Hellman Trust Anchor using System crypto and X.509 V1 certificates
            </summary>
            <remarks>
            Extends the generic System Crypto CA class (<see cref="T:OSCA.Offline.sysCA"/>)
            <para>This is a Version 3.x class</para>
            </remarks>
        </member>
        <member name="M:OSCA.Offline.dhTA.#ctor(System.String)">
            <summary>
            Create an instance of a simple DH TA
            </summary>
            <param name="ConfigFile">Full pathname to config file</param>
        </member>
        <member name="M:OSCA.Offline.dhTA.getCertificateGenerator">
            <summary>
            Return a certificate generator instance for this CA
            </summary>
            <returns>Certificate generator</returns>
            <remarks>This CA only supports V1 certificates</remarks>
        </member>
        <member name="M:OSCA.Offline.dhTA.generate(OSCA.Crypto.ICertGen,Org.BouncyCastle.Asn1.X509.X509Extensions)">
            <summary>
            Generate a certificate
            </summary>
            <param name="gen">Certificate generator instance</param>
            <param name="ext">Extensions to include in the certificate</param>
            <returns>
            New certificate
            </returns>
            <exception cref="T:System.NotSupportedException">This CA does not support X.509v3 extensions</exception>
            <remarks>
            Always throws an exception - this CA uses V1 certificates
            </remarks>
        </member>
        <member name="T:OSCA.Offline.X509ver">
            <summary>
            X.509 certificate version
            </summary>    
        </member>
        <member name="F:OSCA.Offline.X509ver.V1">
            <summary>
            X.509 Version 1
            </summary>
        </member>
        <member name="F:OSCA.Offline.X509ver.V3">
            <summary>
            X.509 Version 3
            </summary>
        </member>
        <member name="T:OSCA.Offline.CA_Type">
            <summary>
            Type of CA
            </summary>
        </member>
        <member name="F:OSCA.Offline.CA_Type.simpleCA">
            <summary>
            OSCA Simple CA (BC crypto) (Version 2)
            </summary>
        </member>
        <member name="F:OSCA.Offline.CA_Type.fipsCA">
            <summary>
            OSCA FIPS CA (System crypto) (Version 2)
            </summary>
        </member>
        <member name="F:OSCA.Offline.CA_Type.bcCA">
            <summary>
            Generic Bouncy Castle Crypto CA
            </summary>
        </member>
        <member name="F:OSCA.Offline.CA_Type.sysCA">
            <summary>
            Generic System Crypto CA
            </summary>
        </member>
        <member name="F:OSCA.Offline.CA_Type.dhTA">
            <summary>
            DH Trust Anchor (System crypto, V1 certificates)
            </summary>
        </member>
        <member name="F:OSCA.Offline.CA_Type.cngCA">
            <summary>
            Experimental CNG CA (ECDSA)
            </summary>
        </member>
        <member name="T:OSCA.Offline.CA_Profile">
            <summary>
            Profile of CA
            </summary>
        </member>
        <member name="F:OSCA.Offline.CA_Profile.rootCA">
            <summary>
            Root CA
            </summary>
        </member>
        <member name="F:OSCA.Offline.CA_Profile.SubCA">
            <summary>
            Subordinate CA
            </summary>
        </member>
        <member name="T:OSCA.Offline.CAConfig">
            <summary>
            Object describing the setup parameters for a CA
            </summary>
        </member>
        <member name="F:OSCA.Offline.CAConfig.name">
            <summary>
             Friendly name for the CA
            </summary>
        </member>
        <member name="F:OSCA.Offline.CAConfig.DN">
            <summary>
            X.501 distinguished name of the CA
            </summary>
        </member>
        <member name="F:OSCA.Offline.CAConfig.profile">
            <summary>
            Type of CA (rootCA|subCA)
            </summary>
        </member>
        <member name="F:OSCA.Offline.CAConfig.profileFile">
            <summary>
            Location of the profile XML file
            </summary>
        </member>
        <member name="F:OSCA.Offline.CAConfig.pkAlgo">
            <summary>
            Public key alogorithm used by the CA
            </summary>
        </member>
        <member name="F:OSCA.Offline.CAConfig.pkSize">
            <summary>
            Size if the public key (eg RSA modulus)
            </summary>
        </member>
        <member name="F:OSCA.Offline.CAConfig.sigAlgo">
            <summary>
            Signature algorithm used by the CA
            </summary>
        </member>
        <member name="F:OSCA.Offline.CAConfig.keyUsage">
            <summary>
            Key usage extension value
            </summary>
        </member>
        <member name="F:OSCA.Offline.CAConfig.version">
            <summary>
            X509 version for the CA certificate
            </summary>
        </member>
        <member name="F:OSCA.Offline.CAConfig.life">
            <summary>
            Lifetime of the CA certificate
            </summary>
        </member>
        <member name="F:OSCA.Offline.CAConfig.units">
            <summary>
            Units used by the lifetime value
            </summary>
        </member>
        <member name="F:OSCA.Offline.CAConfig.crlInterval">
            <summary>
            Frequency of publishing CRLs
            </summary>
        </member>
        <member name="F:OSCA.Offline.CAConfig.caType">
            <summary>
            Type of CA (simpleCA|fipsCA|dhTA)
            </summary>
        </member>
        <member name="F:OSCA.Offline.CAConfig.FIPS140">
            <summary>
            FIPS 140 mode
            </summary>
        </member>
        <member name="F:OSCA.Offline.CAConfig.CSPName">
            <summary>
            Name of Cryptographic Service Provider
            </summary>
        </member>
        <member name="F:OSCA.Offline.CAConfig.CSPNum">
            <summary>
            Number of Cryptographic Service Provider
            </summary>
        </member>
        <member name="F:OSCA.Offline.CAConfig.location">
            <summary>
            Root directory of CA
            </summary>
        </member>
        <member name="F:OSCA.Offline.CAConfig.password">
            <summary>
            Password for accessing key material
            </summary>
        </member>
        <member name="F:OSCA.Offline.CAConfig.rollOver">
            <summary>
            %age of CA key lifetime before rollover
            </summary>
        </member>
        <member name="T:OSCA.Crypto.SysV3CertGen">
            <summary>
            A class to Generate Version 3 X509Certificates.
            Uses system crypto libraries
            </summary>
        </member>
        <member name="T:OSCA.Crypto.IsysCertGen">
            <summary>
            Interface to System (CAPI) certificate generators
            </summary>
            <remarks>All sys cert generators should implement this interface</remarks>
        </member>
        <member name="M:OSCA.Crypto.IsysCertGen.Generate(System.Security.Cryptography.CspParameters)">
            <summary>
            Generate an X509 Certificate
            </summary>
            <param name="cspParam">Reference to the private signing key</param>
            <returns>An X509 Certificate</returns>
        </member>
        <member name="M:OSCA.Crypto.IsysCertGen.Generate(System.Security.Cryptography.CspParameters,Org.BouncyCastle.Asn1.X509.X509Extensions)">
            <summary>
            Generate an X509Certificate.
            </summary>
            <param name="cspParam">Reference to the private signing key</param>
            <param name="Extensions">Extensions to include in the certificate</param>
            <returns>An X509Certificate.</returns>
        </member>
        <member name="M:OSCA.Crypto.IsysCertGen.Generate(System.Security.Cryptography.CspParameters,OSCA.Profile.Profile,System.DateTime,System.DateTime)">
            <summary>
            Generate an X509Certificate.
            </summary>
            <param name="cspParam">Reference to the private signing key</param>
            <param name="Profile">OSCA profile</param>
            <param name="NotBefore">The notBefore date</param>
            <param name="NotAfter">The notAfter date</param>
            <returns>
            An X509Certificate.
            </returns>
        </member>
        <member name="M:OSCA.Crypto.SysV3CertGen.#ctor">
            <summary>
            Constructor for V3 Certificate Generator (system crypto libraries)
            </summary>
        </member>
        <member name="M:OSCA.Crypto.SysV3CertGen.Generate(System.Security.Cryptography.CspParameters)">
            <summary>
            Generate an X509 Certificate
            </summary>
            <param name="cspParam">CspParameters instance that has the private signing key</param>
            <returns>An X509 Certificate</returns>
        </member>
        <member name="M:OSCA.Crypto.SysV3CertGen.Generate(System.Security.Cryptography.CspParameters,Org.BouncyCastle.Asn1.X509.X509Extensions)">
            <summary>
            Generate an X509Certificate.
            </summary>
            <param name="cspParam">CspParameters instance that has the private signing key</param>
            <param name="Extensions">Extensions to include in the certificate</param>
            <returns>An X509Certificate.</returns>
        </member>
        <member name="M:OSCA.Crypto.SysV3CertGen.Generate(System.Security.Cryptography.CspParameters,OSCA.Profile.Profile,System.DateTime,System.DateTime)">
            <summary>
            Generate an X509Certificate.
            </summary>
            <param name="cspParam">The CSP parameter.</param>
            <param name="Profile">OSCA profile.</param>
            <param name="NotBefore">The not before.</param>
            <param name="NotAfter">The not after.</param>
            <returns>
            An X509Certificate.
            </returns>
            <exception cref="T:OSCA.Policy.PolicyEnforcementException">CA policy violation</exception>
            <exception cref="T:Org.BouncyCastle.Security.Certificates.CertificateEncodingException">Exception encoding TBS cert
            or
            Exception producing certificate object</exception>
        </member>
        <member name="T:OSCA.Crypto.BcKeyManager">
            <summary>
            Class that manages keypairs using the BC crypto library
            </summary>
        </member>
        <member name="M:OSCA.Crypto.BcKeyManager.SaveP12(Org.BouncyCastle.Crypto.AsymmetricKeyParameter,Org.BouncyCastle.X509.X509Certificate,System.String,System.String)">
            <summary>
            Save a private key and certificate to a PKCS#12 object
            </summary>
            <param name="privateKey">The private key</param>
            <param name="cert">The certificate</param>
            <param name="password">Password to secure PKCS#12</param>
            <param name="alias">Friendly name for the PKCS#12</param>
            <returns></returns>
        </member>
        <member name="M:OSCA.Crypto.BcKeyManager.SaveP8(Org.BouncyCastle.Crypto.AsymmetricKeyParameter,System.String)">
            <summary>
            Save a private key in an encrypted PKCS#8 object
            </summary>
            <param name="privateKey">Private key value</param>
            <param name="password">Password for encrypt</param>
            <returns>PKCS#8 object</returns>
        </member>
        <member name="T:OSCA.Offline.Utility">
            <summary>
            Collection of utility functions
            </summary>
        </member>
        <member name="M:OSCA.Offline.Utility.getDN(OSCA.Offline.CAConfig)">
            <summary>
            Derive a DN from a CAConfig object
            </summary>
            <param name="config">CA Config object</param>
            <returns>DN of CA</returns>
        </member>
        <member name="M:OSCA.Offline.Utility.ExportToPEM(System.Object)">
            <summary>
            Export an X.509-related object to a PEM format string
            </summary>
            <remarks>
            The following object types are supported:
            <code>
              + X.509 Public Key Certificate
              + X.509 Attribute Certificate
              + X509 CRL
              + PKCS10 Certificate Request
              + PKCS7 CMS object
              + Private key
              + Public key
            </code>
            </remarks>
            <param name="Cert">The object to export</param>
            <returns>A PEM encoded string</returns>
            <exception cref="T:System.ArgumentNullException">No object supplied</exception>
            <exception cref="!:PemGenerationException">Object type not supported</exception>
            <exception cref="T:System.IO.IOException">IO Stream problem</exception>
        </member>
        <member name="M:OSCA.Offline.Utility.cert64(Org.BouncyCastle.X509.X509Certificate)">
            <summary>
            Base64 encode a X509 certificate
            </summary>
            <param name="cert">Certificate object</param>
            <returns>Base64 string containing the certificate</returns>
        </member>
        <member name="M:OSCA.Offline.Utility.rqst64(Org.BouncyCastle.Pkcs.Pkcs10CertificationRequest)">
            <summary>
            Base64 encode a PKCS#10 certificate request
            </summary>
            <param name="request"></param>
            <returns></returns>
        </member>
        <member name="M:OSCA.Offline.Utility.SetCA_Type(System.String)">
            <summary>
            Sets the type of the CA
            </summary>
            <param name="type">The type.</param>
            <returns>CA_Type enum</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Unexpected CA type:  + type</exception>
        </member>
        <member name="M:OSCA.Offline.Utility.TestKeyId(System.Byte[],Org.BouncyCastle.X509.X509Certificate,OSCA.Offline.Utility.KeyIdType)">
            <summary>
            Returns true if a KeyID matches one in a certificate
            </summary>
            <param name="KeyId">KeyIDvalue to test</param>
            <param name="Certificate">Certificate to test</param>
            <param name="IdType">Authority or Subject KeyID</param>
            <returns>
            True for a key match
            </returns>
            <exception cref="T:System.ApplicationException">Authority KeyID extension not found in certificate
            or
            Subject KeyID extension not found in certificate</exception>
        </member>
        <member name="M:OSCA.Offline.Utility.TestDN(Org.BouncyCastle.Asn1.X509.X509Name)">
            <summary>
            Test a DN for null RDN values
            </summary>
            <param name="Name">The name.</param>
            <returns>
            True if all RDNs are non-null, false otherwise
            </returns>
        </member>
        <member name="M:OSCA.Offline.Utility.OrderDN(Org.BouncyCastle.Asn1.X509.X509Name,System.Boolean)">
            <summary>
            Checks and reorders a DN to place CN first (default) or last
            </summary>
            <param name="Name">DN to check</param>
            <param name="CNFirst">if set to <c>true</c> [cn first].</param>
            <returns>
            Reordered DN
            </returns>
        </member>
        <member name="M:OSCA.Offline.Utility.OrderDN(System.String,System.Boolean)">
            <summary>
            Checks and reorders a DN to place CN first or last
            </summary>
            <param name="Name">DN to check</param>
            <param name="CNFirst">if set to <c>true</c> [cn first].</param>
            <returns>
            Reordered DN
            </returns>
        </member>
        <member name="M:OSCA.Offline.Utility.UTF8ByteArrayToString(System.Byte[])">
            <summary>
            Convert a Byte Array of Unicode values (UTF-8 encoded) to a complete string
            </summary>
            <param name="characters">Unicode Byte Array to be converted to a String</param>
            <returns>String converted from Unicode Byte Array</returns>
        </member>
        <member name="M:OSCA.Offline.Utility.StringToUTF8ByteArray(System.String)">
            <summary>
            Convert a String to a Unicode (UTF-8 encoded) Byte Array
            </summary>
            <param name="pXmlString">String to be converted to a Unicode Byte Array</param>
            <returns>Unicode (UTF-8) Byte Array converted from a String</returns>
        </member>
        <member name="T:OSCA.Offline.Utility.KeyIdType">
            <summary>
            Key ID type
            </summary>
        </member>
        <member name="F:OSCA.Offline.Utility.KeyIdType.AKID">
            <summary>
            The akid
            </summary>
        </member>
        <member name="F:OSCA.Offline.Utility.KeyIdType.SKID">
            <summary>
            The skid
            </summary>
        </member>
        <member name="T:OSCA.Crypto.X509.MsPrevCaCertHash">
            <summary>
            Microsoft private Previous CA Certificate Hash extension
            </summary>
            <remarks>
            Contains the SHA-1 hash of the previous version of the CA certificate
            <para>
            Not a veru complicated extension, just contains an OctetString:
            <code>
            The MsPrevCaCertHash object
            
            MsPrevCaCertHashSyntax  ::=
                  OCTETSTRING (0..MAX) 
            </code>
            </para>
            </remarks>
        </member>
        <member name="F:OSCA.Crypto.X509.MsPrevCaCertHash.PrevHash">
            <summary>
            Microsoft private Previous CA Certificate Hash extension
            </summary>
        </member>
        <member name="M:OSCA.Crypto.X509.MsPrevCaCertHash.GetInstance(System.Object)">
            <summary>
            Gets the instance.
            </summary>
            <param name="obj">The object.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Unknown object in factory</exception>
        </member>
        <member name="M:OSCA.Crypto.X509.MsPrevCaCertHash.#ctor(Org.BouncyCastle.Asn1.Asn1OctetString)">
            <summary>
            Initializes a new instance of the <see cref="T:OSCA.Crypto.X509.MsCaVersion"/> class.
            </summary>
            <param name="hash">The hash.</param>
        </member>
        <member name="M:OSCA.Crypto.X509.MsPrevCaCertHash.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:OSCA.Crypto.X509.MsCaVersion"/> class.
            </summary>
            <param name="Hash">The hash.</param>
        </member>
        <member name="M:OSCA.Crypto.X509.MsPrevCaCertHash.ToAsn1Object">
            <summary>
            Output asn1 object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSCA.Crypto.X509.MsPrevCaCertHash.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:OSCA.Crypto.X509.MsPrevCaCertHash.Hash">
            <summary>
            Gets or sets the hash.
            </summary>
            <value>
            The hash.
            </value>
        </member>
        <member name="T:OSCA.Profile.unknownExtension">
            <summary>
            Unknown extension
            </summary>
            <remarks>   
            This class is the default (or unknown) extension
            <para>
            An instance of this class will be created by the <see cref="T:OSCA.Profile.ProfileExtensionFactory"/> if an unknown extension is submitted
            </para>
            </remarks>
        </member>
        <member name="M:OSCA.Profile.unknownExtension.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OSCA.Profile.unknownExtension"/> class.
            </summary>
            <remarks>Always throws an exception. <para>You may only create this type of extension by passing in an instance of X509Extension.</para></remarks>
            <exception cref="T:System.ApplicationException">Invalid operation: Create "Unknown" Extension</exception>
        </member>
        <member name="M:OSCA.Profile.unknownExtension.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:OSCA.Profile.unknownExtension"/> class.
            </summary>
            <remarks>Always throws an exception. <para>You may only create this type of extension by passing in an instance of X509Extension with an OID.</para></remarks>
            <param name="Critical">True = Critical, False = Not Critical</param>
            <exception cref="T:System.ApplicationException">Invalid operation: Create "Unknown" Extension</exception>
        </member>
        <member name="M:OSCA.Profile.unknownExtension.#ctor(Org.BouncyCastle.Asn1.DerObjectIdentifier,Org.BouncyCastle.Asn1.X509.X509Extension)">
            <summary>
            Initializes a new instance of the <see cref="T:OSCA.Profile.unknownExtension"/> class.
            </summary>
            <param name="OID">The oid.</param>
            <param name="Extension">The extension.</param>
        </member>
        <member name="M:OSCA.Profile.unknownExtension.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Initializes a new instance of the <see cref="T:OSCA.Profile.unknownExtension"/> class.
            </summary>
            <param name="xml">The XML.</param>
            <exception cref="T:System.ApplicationException">Invalid operation: Create "Unknown" Extension from XML description</exception>
        </member>
        <member name="M:OSCA.Profile.unknownExtension.#ctor(Org.BouncyCastle.Asn1.X509.X509Extension)">
            <summary>
            Initializes a new instance of the <see cref="T:OSCA.Profile.unknownExtension"/> class.
            </summary>
            <remarks>Always throws an exception. <para>You may only create this type of extension by passing in an instance of X509Extension with an OID.</para></remarks>
            <exception cref="T:System.ApplicationException">Invalid operation: Create "Unknown" Extension</exception>
            <param name="Extension">X509Extension instance</param>
        </member>
        <member name="M:OSCA.Profile.unknownExtension.ToXml">
            <summary>
            Provide an XML version of the extension
            </summary>
            <returns>XML encoding of the extension</returns>
            <exception cref="T:System.ApplicationException">Invalid operation: Create XML description from "Unknown" Extension</exception>
        </member>
        <member name="M:OSCA.Profile.unknownExtension.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that describes this extension
            </summary>
            <returns>
            A <see cref="T:System.String"/> that describes this extension
            </returns>
        </member>
        <member name="P:OSCA.Profile.unknownExtension.DerEncoding">
            <summary>
            DER encoded value of extension
            </summary>
        </member>
        <member name="T:OSCA.Profile.issuerAltName">
             <summary>
             Issuer Alternative Name extension
             </summary>
             <remarks>
             ASN.1 description from RFC 5280:
             <code>
             id-ce-issuerAltName OBJECT IDENTIFIER ::=  { id-ce 18 }
             
             IssuerAltName ::= GeneralNames
            
             GeneralNames ::= SEQUENCE SIZE (1..MAX) OF GeneralName
             
             GeneralName ::= CHOICE {
                 otherName                       [0]     OtherName,
                 rfc822Name                      [1]     IA5String,
                 dNSName                         [2]     IA5String,
                 x400Address                     [3]     ORAddress,
                 directoryName                   [4]     Name,
                 ediPartyName                    [5]     EDIPartyName,
                 uniformResourceIdentifier       [6]     IA5String,
                 iPAddress                       [7]     OCTET STRING,
                 registeredID                    [8]     OBJECT IDENTIFIER }
                 
             OtherName ::= SEQUENCE {
                 type-id    OBJECT IDENTIFIER,
                 value      [0] EXPLICIT ANY DEFINED BY type-id }
                 
             EDIPartyName ::= SEQUENCE {
                 nameAssigner            [0]     DirectoryString OPTIONAL,
                 partyName               [1]     DirectoryString }
             </code> 
             </remarks>
        </member>
        <member name="M:OSCA.Profile.issuerAltName.#ctor">
            <summary>
            Create a new IssuerAltName extension
            </summary>
        </member>
        <member name="M:OSCA.Profile.issuerAltName.#ctor(System.Boolean)">
            <summary>
            Create a new IssuerAltName extension
            </summary>
            <param name="critical">True if critical, else false</param>
        </member>
        <member name="M:OSCA.Profile.issuerAltName.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Create a new IssuerAltName extension from an XML file
            </summary>
            <remarks>
            Sample OSCA XML description of the IssuerAlternativeName extension:
            <code>
            &lt;Extension&gt;
                &lt;name displayName="Issuer Alternative Name"&gt;IssuerAlternativeName&lt;/name&gt;
                &lt;critical&gt;false&lt;/critical&gt;
                &lt;value&gt;
                    &lt;altName type="rc822Name"&gt;peter@foo.com&lt;/altName&gt;
                    &lt;altName type="dNSName"&gt;peter.foo.com&lt;/altName&gt;
                &lt;/value&gt;
            &lt;/Extension&gt;
            </code>
            </remarks>
            <param name="Xml"></param>
        </member>
        <member name="M:OSCA.Profile.issuerAltName.#ctor(Org.BouncyCastle.Asn1.X509.X509Extension)">
            <summary>
            Create IssuerAltName extension from an X509Extension
            </summary>
            <param name="Extension">X509 extension</param>
            <remarks>
            Sub classses must provide an implementation to decode their values
            </remarks>
        </member>
        <member name="P:OSCA.Profile.issuerAltName.IssAltNames">
            <summary>
            IssuerAltName settings
            </summary>
        </member>
        <member name="T:OSCA.Policy.PolicyEnforcementException">
            <summary>
            Class describing an OSCA policy exception
            </summary>
        </member>
        <member name="M:OSCA.Policy.PolicyEnforcementException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OSCA.Policy.PolicyEnforcementException"/> class.
            </summary>
        </member>
        <member name="M:OSCA.Policy.PolicyEnforcementException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:OSCA.Policy.PolicyEnforcementException"/> class.
            </summary>
            <param name="Message">The message.</param>
        </member>
        <member name="M:OSCA.Policy.PolicyEnforcementException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:OSCA.Policy.PolicyEnforcementException"/> class.
            </summary>
            <param name="Message">The message.</param>
            <param name="e">The e.</param>
        </member>
        <member name="T:OSCA.Profile.KeyIdentifierMethod">
            <summary>
            Method used for creating Key Identifier
            </summary>
        </member>
        <member name="F:OSCA.Profile.KeyIdentifierMethod.Full">
            <summary>
            Sha-1 hash
            </summary>
        </member>
        <member name="F:OSCA.Profile.KeyIdentifierMethod.Truncated">
            <summary>
            Truncated Sha-1 hash
            </summary>
        </member>
        <member name="T:OSCA.Profile.KeyIdentifier">
            <summary>
            Abstract base class for Key Identifier extensions
            </summary>
        </member>
        <member name="F:OSCA.Profile.KeyIdentifier.keyIdentifier">
            <summary>
            Key identifier common to both SKID and AKID
            </summary>
        </member>
        <member name="F:OSCA.Profile.KeyIdentifier.method">
            <summary>
            The method
            </summary>
        </member>
        <member name="F:OSCA.Profile.KeyIdentifier.encodedValue">
            <summary>
            The encoded value
            </summary>
        </member>
        <member name="M:OSCA.Profile.KeyIdentifier.#ctor">
            <summary>
            Create extension
            </summary>
        </member>
        <member name="M:OSCA.Profile.KeyIdentifier.#ctor(System.Boolean)">
            <summary>
            Create extension using supplied values
            </summary>
            <param name="Critical">True = Critical, False = Not Critical</param>
        </member>
        <member name="M:OSCA.Profile.KeyIdentifier.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Create extension from XML profile file entry
            </summary>
            <param name="xml">XML version of the extension</param>
        </member>
        <member name="M:OSCA.Profile.KeyIdentifier.ToXml">
            <summary>
            Provide an XML version of the extension
            </summary>
            <returns>XML encoding of the extension</returns>
        </member>
        <member name="M:OSCA.Profile.KeyIdentifier.IsTheSame(Org.BouncyCastle.Asn1.X509.SubjectPublicKeyInfo)">
            <summary>
            Determines whether [is the same] [the specified keyto test].
            </summary>
            <param name="KeytoTest">The keyto test.</param>
            <returns></returns>
        </member>
        <member name="M:OSCA.Profile.KeyIdentifier.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that describes this extension
            </summary>
            <returns>
            A <see cref="T:System.String"/> that describes this extension
            </returns>
        </member>
        <member name="T:OSCA.Crypto.X509.OcspNocheck">
            <summary>
            Class that defines the OCSP NoCheck extension (per RFC2560)
            </summary>
        </member>
        <member name="F:OSCA.Crypto.X509.OcspNocheck.ocspNocheck">
            <summary>
            OCSP NoCheck OID {id-pkix-ocsp 5 }
            </summary>
        </member>
        <member name="M:OSCA.Crypto.X509.OcspNocheck.GetInstance(System.Object)">
            <summary>
            Return an instance of the OcspNoCheck class
            </summary>
            <param name="obj">An object</param>
            <returns>OcspNoCheck instance</returns>
            <exception cref="T:System.ArgumentException">Unknown object in factory (not an instance of OcspNoCheck)</exception>
        </member>
        <member name="M:OSCA.Crypto.X509.OcspNocheck.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OSCA.Crypto.X509.OcspNocheck"/> class.
            </summary>
        </member>
        <member name="M:OSCA.Crypto.X509.OcspNocheck.ToAsn1Object">
            <summary>
            Convert to an Asn1Object.
            </summary>
            <returns>An Asn1Object</returns>
        </member>
        <member name="M:OSCA.Crypto.X509.OcspNocheck.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:OSCA.Offline.bcCA">
            <summary>
            Class describing a generic Bouncy Castle Crypto CA
            </summary>
            <remarks>This is a Version 3.x class</remarks>
        </member>
        <member name="F:OSCA.Offline.bcCA.privateKey">
            <summary>
            Signing key for the CA
            </summary>
        </member>
        <member name="F:OSCA.Offline.bcCA.password">
            <summary>
            Password for the CA key file
            </summary>
        </member>
        <member name="M:OSCA.Offline.bcCA.#ctor(System.String,System.String)">
            <summary>
            Create an instance of a generic Bouncy Castle Crypto CA
            </summary>
            <param name="ConfigFile">Full pathname to config file</param>
            <param name="Password">Password for CA key file</param>
        </member>
        <member name="M:OSCA.Offline.bcCA.getCertificateGenerator">
            <summary>
            Return a certificate generator instance for this CA
            </summary>
            <returns>Certificate generator</returns>
        </member>
        <member name="M:OSCA.Offline.bcCA.generate(OSCA.Crypto.ICertGen,OSCA.Profile.Profile,System.DateTime,System.DateTime)">
            <summary>
            Generates the certificate.
            </summary>
            <param name="gen">The generator.</param>
            <param name="profile">The profile.</param>
            <param name="notBefore">The not before.</param>
            <param name="notAfter">The not after.</param>
            <returns></returns>
        </member>
        <member name="M:OSCA.Offline.bcCA.generate(OSCA.Crypto.ICertGen)">
            <summary>
            Generates the certificate.
            </summary>
            <param name="gen">The generator.</param>
            <returns></returns>
        </member>
        <member name="M:OSCA.Offline.bcCA.generate(OSCA.Crypto.ICertGen,Org.BouncyCastle.Asn1.X509.X509Extensions)">
            <summary>
            Generates the certificate.
            </summary>
            <param name="gen">The generator.</param>
            <param name="ext">The extensions.</param>
            <returns></returns>
        </member>
        <member name="M:OSCA.Offline.bcCA.IssueCRL">
            <summary>
            Issue a CRL (containing all revoked certificates)
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSCA.Offline.bcCA.Backup(System.String,System.String)">
            <summary>
            Backup the CA key material to a PKCS#12 file
            </summary>
            <param name="Password">Strong password used for encryption</param>
            <param name="OutFile">Outut file</param>
        </member>
        <member name="T:OSCA.Crypto.SysCrlGen">
            class to produce an X.509 Version 2 CRL using System crypto
        </member>
        <member name="M:OSCA.Crypto.SysCrlGen.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OSCA.Crypto.SysCrlGen"/> class.
            </summary>
        </member>
        <member name="M:OSCA.Crypto.SysCrlGen.Generate(System.Security.Cryptography.CspParameters)">
            <summary>Generate an X509 CRL, based on the current issuer and subject.</summary>
            <param name="cspParam">CSP Parameters containing the key</param>
        </member>
        <member name="T:OSCA.Crypto.X509.MsCaVersion">
            <summary>
            Microsoft private CA Version extension
            </summary>
            <remarks>
            This refers to the version of the key used by the issuing CA, and is presumably used to differentiate between CRLs.
            <para>
            Not a veru complicated extension, just contains a single Int:
            <code>
            The MsCaVersion object
            
            MsCaVersionSyntax  ::=
                  INTEGER (0..MAX) 
            </code>
            </para>
            </remarks>
        </member>
        <member name="F:OSCA.Crypto.X509.MsCaVersion.CaVersion">
            <summary>
            Microsoft private CA Version extension
            </summary>
        </member>
        <member name="M:OSCA.Crypto.X509.MsCaVersion.GetInstance(System.Object)">
            <summary>
            Gets the instance.
            </summary>
            <param name="obj">The object.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Unknown object in factory</exception>
        </member>
        <member name="M:OSCA.Crypto.X509.MsCaVersion.#ctor(Org.BouncyCastle.Asn1.DerInteger)">
            <summary>
            Initializes a new instance of the <see cref="T:OSCA.Crypto.X509.MsCaVersion"/> class.
            </summary>
            <param name="version">The version.</param>
        </member>
        <member name="M:OSCA.Crypto.X509.MsCaVersion.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OSCA.Crypto.X509.MsCaVersion"/> class.
            </summary>
            <param name="Version">CA version.</param>
        </member>
        <member name="M:OSCA.Crypto.X509.MsCaVersion.ToAsn1Object">
            <summary>
            Output asn1 object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSCA.Crypto.X509.MsCaVersion.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:OSCA.Crypto.X509.MsCaVersion.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>
            The version.
            </value>
        </member>
        <member name="T:OSCA.Crypto.X509.FreshestCRL">
            <summary>
            Class describing the FreshestCRL extension (aka Delta CRL)
            </summary>
            <remarks>
            This class is derived from the BC CRLDistPoint class as it is basically the same (see RFC 5280):
            <code>
            id-ce-freshestCRL OBJECT IDENTIFIER ::=  { id-ce 46 }
            
            FreshestCRL ::= CRLDistributionPoints
            </code>
            </remarks>
        </member>
        <member name="M:OSCA.Crypto.X509.FreshestCRL.GetInstance(Org.BouncyCastle.Asn1.Asn1TaggedObject,System.Boolean)">
            <summary>
            Gets the instance.
            </summary>
            <param name="obj">The object.</param>
            <param name="explicitly">if set to <c>true</c> [explicitly].</param>
            <returns></returns>
        </member>
        <member name="M:OSCA.Crypto.X509.FreshestCRL.GetInstance(System.Object)">
            <summary>
            Gets the instance.
            </summary>
            <param name="obj">The object.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">Unknown object in factory</exception>
        </member>
        <member name="M:OSCA.Crypto.X509.FreshestCRL.#ctor(Org.BouncyCastle.Asn1.X509.DistributionPoint[])">
            <summary>
            Initializes a new instance of the <see cref="T:OSCA.Crypto.X509.FreshestCRL"/> class.
            </summary>
            <param name="points">Distribution points.</param>
        </member>
        <member name="M:OSCA.Crypto.X509.FreshestCRL.GetDistributionPoints">
            <summary>
            Return the distribution points making up the sequence.
            </summary>
            <returns>DistributionPoint[]</returns>
        </member>
        <member name="M:OSCA.Crypto.X509.FreshestCRL.ToAsn1Object">
            <summary>
            Produce an object suitable for an Asn1OutputStream.
            </summary>
            <returns>Asn1 Object</returns>
        </member>
        <member name="M:OSCA.Crypto.X509.FreshestCRL.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:OSCA.Profile.authorityInfoAccess">
            <summary>
            Authority Information Access extension
            </summary>
            <remarks>
            Asn.1 description from RFC5280:
            <code>
            id-pe-authorityInfoAccess OBJECT IDENTIFIER ::= { id-pe 1 }
            
            AuthorityInfoAccessSyntax  ::=
                SEQUENCE SIZE (1..MAX) OF AccessDescription
                
                AccessDescription  ::=  SEQUENCE {
                accessMethod          OBJECT IDENTIFIER,
                accessLocation        GeneralName  }
                
            id-ad OBJECT IDENTIFIER ::= { id-pkix 48 }
            
            id-ad-caIssuers OBJECT IDENTIFIER ::= { id-ad 2 }
            
            id-ad-ocsp OBJECT IDENTIFIER ::= { id-ad 1 }
            </code>
            </remarks> 
        </member>
        <member name="M:OSCA.Profile.authorityInfoAccess.#ctor">
            <summary>
            Create a new AIA extension
            </summary>
        </member>
        <member name="M:OSCA.Profile.authorityInfoAccess.#ctor(System.Boolean)">
            <summary>
            Create a new AIA extension
            </summary>
            <param name="critical">True if critical, else false</param>
        </member>
        <member name="M:OSCA.Profile.authorityInfoAccess.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Create AIA extension from XML profile description
            </summary>
            <remarks>
            Sample XML description of the AIA extension:
            </remarks>
            <code>
            &lt;Extension&gt;
                &lt;name description="Authority Info Access"&gt;AuthorityInfoAccess&lt;/name&gt;
                &lt;critical&gt;false&lt;/critical&gt;
                &lt;value&gt;
                    &lt;accessDescription&gt;
                        &lt;method&gt;CAIssuers&lt;/method&gt;
                        &lt;location type="uniformResourceIdentifier"&gt;http://foo.com/issuer.crt&lt;/location&gt;
                    &lt;/accessDescription&gt;
                    &lt;accessDescription&gt;
                        &lt;method&gt;Ocsp&lt;/method&gt;
                        &lt;location type="uniformResourceIdentifier"&gt;http://foo.com:2560/ocsp&lt;/location&gt;
                    &lt;accessDescription&gt;   
                &lt;/value&gt;
            &lt;/Extension&gt;
            </code>
            <param name="Xml">XML element enclosing the extension description</param>
        </member>
        <member name="M:OSCA.Profile.authorityInfoAccess.#ctor(Org.BouncyCastle.Asn1.X509.X509Extension)">
            <summary>
            Create AIA extension from an X509Extension
            </summary>
            <param name="Extension">X509 extension</param>
            <remarks>
            Sub classses must provide an implementation to decode their values
            </remarks>
        </member>
        <member name="M:OSCA.Profile.authorityInfoAccess.encode">
            <summary>
            Encode the extension
            </summary>
        </member>
        <member name="P:OSCA.Profile.authorityInfoAccess.AuthInfoAccess">
            <summary>
            AIA settings
            </summary>
        </member>
        <member name="P:OSCA.Profile.authorityInfoAccess.AuthorityInformationAccess">
            <summary>
            DER encoded value of AuthorityInfoAccess
            </summary>
        </member>
        <member name="P:OSCA.Profile.authorityInfoAccess.DerEncoding">
            <summary>
            DER encoded value of extension
            </summary>
        </member>
        <member name="T:OSCA.Profile.subjectKeyIdentifier">
            <summary>
            Subject Key Identifier extension
            </summary>
            <remarks>
            Asn.1 description from RFC5280:
            <code>
            id-ce-subjectKeyIdentifier OBJECT IDENTIFIER ::=  { id-ce 14 }
            
            SubjectKeyIdentifier ::= KeyIdentifier
            
            KeyIdentifier ::= OCTET STRING
            </code>
            </remarks> 
        </member>
        <member name="M:OSCA.Profile.subjectKeyIdentifier.#ctor">
            <summary>
            Create a new SKID extension
            </summary>
        </member>
        <member name="M:OSCA.Profile.subjectKeyIdentifier.#ctor(System.Boolean)">
            <summary>
            Create a new SKID extension
            </summary>
            <param name="critical">True if critical, else false</param>
        </member>
        <member name="M:OSCA.Profile.subjectKeyIdentifier.#ctor(System.Xml.Linq.XElement)">
            <summary>
            Create SKID extension from XML profile description
            </summary>
            <remarks>
            Sample XML description of the SKID extension:
            </remarks>
            <code>
            &lt;Extension&gt;
                &lt;name description="Subject Key Identifier"&gt;SubjectKeyIdentifier&lt;/name&gt;
                &lt;critical&gt;false&lt;/critical&gt;
                &lt;value&gt;
                    &lt;keyID method="Full"&gt;00010203040506070809101112131415&lt;/keyID&gt;
                &lt;/value&gt;
            &lt;/Extension&gt;
            </code>
            <param name="Xml">XML element enclosing the extension description</param>
        </member>
        <member name="M:OSCA.Profile.subjectKeyIdentifier.#ctor(Org.BouncyCastle.Asn1.X509.X509Extension)">
            <summary>
            Create SKID extension from an X509Extension
            </summary>
            <param name="Extension">X509 extension</param>
            <remarks>
            The work is done in the base class
            </remarks>
        </member>
        <member name="M:OSCA.Profile.subjectKeyIdentifier.encode">
            <summary>
            Encode the extension
            </summary>
        </member>
        <member name="P:OSCA.Profile.subjectKeyIdentifier.SubjectKeyIdentifier">
            <summary>
            DER encoded value of SubjectKeyIdentifier
            </summary>
        </member>
        <member name="P:OSCA.Profile.subjectKeyIdentifier.DerEncoding">
            <summary>
            DER encoded value of extension
            </summary>
        </member>
        <member name="T:OSCA.Crypto.XmlSigning">
            <summary>
            Generic methods for signing and verifying XML signatures
            </summary>
        </member>
        <member name="M:OSCA.Crypto.XmlSigning.SignXml(System.Xml.Linq.XDocument,System.String,Org.BouncyCastle.X509.X509Certificate,Org.BouncyCastle.Crypto.AsymmetricKeyParameter)">
            <summary>
            Sign an XML document and save in a file
            </summary>
            <param name="XmlData">The XML data.</param>
            <param name="SignedFileName">Output filename</param>
            <param name="Cert">The cert.</param>
            <param name="PrivateKey">The private key.</param>
        </member>
        <member name="M:OSCA.Crypto.XmlSigning.SignXml(System.Xml.Linq.XDocument,System.String,Org.BouncyCastle.X509.X509Certificate,System.Security.Cryptography.CspParameters)">
            <summary>
            Sign an XML document and save in a file
            </summary>
            <param name="xmlData">XML document</param>
            <param name="SignedFileName">Output filename</param>
            <param name="cert">The cert.</param>
            <param name="cspParam">The CSP parameter.</param>
            <exception cref="T:System.ArgumentNullException">
            xmlData
            or
            SignedFileName
            </exception>
        </member>
        <member name="M:OSCA.Crypto.XmlSigning.VerifyXmlFile(System.String)">
            <summary>
            Verify the signature of an XML file
            </summary>
            <param name="fileName">Filename</param>
            <returns>True or False</returns>
        </member>
        <member name="M:OSCA.Crypto.XmlSigning.UnSignXML(System.String)">
            <summary>
            Remove the signature information from an XML file and return the result in a Stream
            </summary>
            <param name="sigFileName">XML pathname</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">File not found</exception>
        </member>
        <member name="T:OSCA.Crypto.X509.MsCertTemplateName">
            <summary>
            Microsoft private Certificate Template Name extension
            </summary>
            <remarks>
            This identifies which template was used to define the certificate contents.
            <para>
            This extension is used during enrollment to specify the correct template
            </para>
            <code>
            The MsCertTemplateName object
            
            MsCertTemplateName  ::= OCTET STRING
            </code>
            </remarks>
        </member>
        <member name="F:OSCA.Crypto.X509.MsCertTemplateName.CertTemplateName">
            <summary>
            Microsoft private Certificate Template Name extension
            </summary>
        </member>
        <member name="M:OSCA.Crypto.X509.MsCertTemplateName.GetInstance(System.Object)">
            <summary>
            Gets the instance.
            </summary>
            <param name="obj">The object.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">unknown object in factory:  + obj.GetType().Name;obj</exception>
        </member>
        <member name="M:OSCA.Crypto.X509.MsCertTemplateName.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:OSCA.Crypto.X509.MsCertTemplateName"/> class.
            </summary>
            <param name="TemplateName">Name of the template.</param>
        </member>
        <member name="M:OSCA.Crypto.X509.MsCertTemplateName.ToAsn1Object">
            <summary>
            Output asn1 object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSCA.Crypto.X509.MsCertTemplateName.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:OSCA.Crypto.X509.MsCertTemplateName.TemplateName">
            <summary>
            Gets or sets the template.
            </summary>
            <value>
            The template.
            </value>
        </member>
        <member name="T:OSCA.Crypto.X509.MsCertTemplateInfo">
            <summary>
            Microsoft private Certificate Template Information extension
            </summary>
            <remarks>
            This identifies which template was used to define the certificate contents.
            <para>
            This extension is used during (automatic) re-enrollment to assign the correct template; it is also used to force re-enrollment following a template change.
            </para>
            <code>
            The MsCertTemplateInfo object
            
            MsCertTemplateInfoSyntax  ::= SEQUENCE of {
                  Template,
                  TemplateMajorVersion,
                  TemplateMinorVersion }
            
            Template ::= OBJECTIDENTIFIER
            TemplateMajorVersion ::= INTEGER (0..MAX)
            TemplateMinorVersion ::= INTEGER (0..MAX)
            </code>
            </remarks>
        </member>
        <member name="F:OSCA.Crypto.X509.MsCertTemplateInfo.CertTemplateInfo">
            <summary>
            Microsoft private Certificate Template Information extension
            </summary>
        </member>
        <member name="M:OSCA.Crypto.X509.MsCertTemplateInfo.GetInstance(System.Object)">
            <summary>
            Gets the instance.
            </summary>
            <param name="obj">The object.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">unknown object in factory:  + obj.GetType().Name;obj</exception>
        </member>
        <member name="M:OSCA.Crypto.X509.MsCertTemplateInfo.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:OSCA.Crypto.X509.MsCertTemplateInfo"/> class.
            </summary>
            <param name="Template">The template.</param>
            <param name="MajorVersion">The major version.</param>
            <param name="MinorVersion">The minor version.</param>
        </member>
        <member name="M:OSCA.Crypto.X509.MsCertTemplateInfo.ToAsn1Object">
            <summary>
            Output asn1 object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:OSCA.Crypto.X509.MsCertTemplateInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:OSCA.Crypto.X509.MsCertTemplateInfo.Template">
            <summary>
            Gets or sets the template.
            </summary>
            <value>
            The template.
            </value>
        </member>
        <member name="P:OSCA.Crypto.X509.MsCertTemplateInfo.MajorVersion">
            <summary>
            Gets or sets the major version.
            </summary>
            <value>
            The major version.
            </value>
        </member>
        <member name="P:OSCA.Crypto.X509.MsCertTemplateInfo.MinorVersion">
            <summary>
            Gets or sets the minor version.
            </summary>
            <value>
            The minor version.
            </value>
        </member>
        <member name="M:OSCA.Crypto.IcngCertGen.Generate(System.Security.Cryptography.CngKey)">
            <summary>
            Generate an X509 Certificate
            </summary>
            <param name="key">Reference to signing key.</param>
            <returns>
            An X509 Certificate
            </returns>
        </member>
        <member name="M:OSCA.Crypto.IcngCertGen.Generate(System.Security.Cryptography.CngKey,Org.BouncyCastle.Asn1.X509.X509Extensions)">
            <summary>
            Generate an X509Certificate.
            </summary>
            <param name="key">Reference to signing key.</param>
            <param name="Extensions">Extensions to include in the certificate</param>
            <returns>
            An X509Certificate.
            </returns>
        </member>
        <member name="M:OSCA.Crypto.IcngCertGen.Generate(System.Security.Cryptography.CngKey,OSCA.Profile.Profile,System.DateTime,System.DateTime)">
            <summary>
            Generate an X509Certificate.
            </summary>
            <param name="key">Reference to signing key.</param>
            <param name="Profile">OSCA profile.</param>
            <param name="NotBefore">The not before.</param>
            <param name="NotAfter">The not after.</param>
            <returns>
            An X509Certificate.
            </returns>
        </member>
        <member name="M:OSCA.Crypto.CNG.CngV3CertGen.#ctor">
            <summary>
            Constructor for V3 Certificate Generator (system crypto libraries)
            </summary>
        </member>
        <member name="M:OSCA.Crypto.CNG.CngV3CertGen.Generate(System.Security.Cryptography.CngKey)">
            <summary>
            Generate an X509 Certificate
            </summary>
            <param name="cspParam">CspParameters instance that has the private signing key</param>
            <returns>An X509 Certificate</returns>
        </member>
        <member name="M:OSCA.Crypto.CNG.CngV3CertGen.Generate(System.Security.Cryptography.CngKey,Org.BouncyCastle.Asn1.X509.X509Extensions)">
            <summary>
            Generate an X509Certificate.
            </summary>
            <param name="cspParam">CspParameters instance that has the private signing key</param>
            <param name="Extensions">Extensions to include in the certificate</param>
            <returns>An X509Certificate.</returns>
        </member>
        <member name="M:OSCA.Crypto.CNG.CngV3CertGen.Generate(System.Security.Cryptography.CngKey,OSCA.Profile.Profile,System.DateTime,System.DateTime)">
            <summary>
            Generate an X509Certificate.
            </summary>
            <param name="cspParam">The CSP parameter.</param>
            <param name="Profile">OSCA profile.</param>
            <param name="NotBefore">The not before.</param>
            <param name="NotAfter">The not after.</param>
            <returns>
            An X509Certificate.
            </returns>
            <exception cref="T:OSCA.Policy.PolicyEnforcementException">CA policy violation</exception>
            <exception cref="T:Org.BouncyCastle.Security.Certificates.CertificateEncodingException">Exception encoding TBS cert
            or
            Exception producing certificate object</exception>
        </member>
        <member name="T:OSCA.Offline.cngCA">
            <summary>
            Class describing a generic CNG CA
            </summary>
            <remarks>This is a Version 3.x class
            <para>NOTE - this is an experiemental implementation with limitations (like no protection of the files with xml signatures
            </para></remarks>
        </member>
        <member name="F:OSCA.Offline.cngCA.privateKey">
            <summary>
            Signing key for the CA
            </summary>
        </member>
        <member name="M:OSCA.Offline.cngCA.#ctor(System.String)">
            <summary>
            Create an instance of a generic System Crypto CA
            </summary>
            <param name="ConfigFile">Full pathname to config file</param>
            <exception cref="T:Org.BouncyCastle.Security.InvalidParameterException">Invalid FIPS140 flag for this CA instance</exception>
        </member>
        <member name="M:OSCA.Offline.cngCA.Backup(System.String,System.String)">
            <summary>
            Backup the CA key material to a PKCS#12 file
            </summary>
            <param name="Password">Strong password used for encryption</param>
            <param name="OutputFile">Full pathname to the PKCS#12 output file</param>
            <exception cref="T:System.ApplicationException">Failed Key Backup</exception>
        </member>
        <member name="M:OSCA.Offline.cngCA.getCertificateGenerator">
            <summary>
            Return a certificate generator instance for this CA
            </summary>
            <returns>Certificate generator</returns>
        </member>
        <member name="M:OSCA.Offline.cngCA.generate(OSCA.Crypto.ICertGen,OSCA.Profile.Profile,System.DateTime,System.DateTime)">
            <summary>
            Generates the certificate.
            </summary>
            <param name="gen">The generator.</param>
            <param name="profile">The profile.</param>
            <param name="notBefore"></param>
            <param name="notAfter"></param>
            <returns></returns>
        </member>
        <member name="M:OSCA.Offline.cngCA.generate(OSCA.Crypto.ICertGen)">
            <summary>
            Generate a certificate
            </summary>
            <remarks>All extensions in request will be included in the certificate</remarks>
            <param name="gen">Certificate generator instance</param>
            <returns>New certificate</returns>
        </member>
        <member name="M:OSCA.Offline.cngCA.generate(OSCA.Crypto.ICertGen,Org.BouncyCastle.Asn1.X509.X509Extensions)">
            <summary>
            Generate a certificate
            </summary>
            <remarks>Only the extensions supplied will be included in the certificate</remarks>
            <param name="gen">Certificate generator instance</param>
            <param name="ext">Extensions to include in the certificate</param>
            <returns>New certificate</returns>
        </member>
        <member name="M:OSCA.Offline.cngCA.IssueCRL">
            <summary>
            Issue a CRL (containing all revoked certificates)
            </summary>
            <returns>CRL number</returns>
        </member>
        <member name="T:OSCA.Crypto.CNG.CngCrlGen">
            class to produce an X.509 Version 2 CRL using System crypto
        </member>
        <member name="M:OSCA.Crypto.CNG.CngCrlGen.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:OSCA.Crypto.SysCrlGen"/> class.
            </summary>
        </member>
        <member name="M:OSCA.Crypto.CNG.CngCrlGen.Generate(System.Security.Cryptography.CngKey)">
            <summary>Generate an X509 CRL, based on the current issuer and subject.</summary>
            <param name="cspParam">CSP Parameters containing the key</param>
        </member>
    </members>
</doc>
