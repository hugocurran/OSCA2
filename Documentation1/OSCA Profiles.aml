<?xml version="1.0" encoding="utf-8"?>
<topic id="137379b4-8efb-495a-8947-1224b987c8c3" revisionNumber="1">
  <developerConceptualDocument
    xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
    xmlns:xlink="http://www.w3.org/1999/xlink">

    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->

    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->

      <para>This section provides an explanation of the OSCA Profiles system</para>
    </introduction>

    <!-- Add one or more top-level section elements.  These are collapsible.
         If using <autoOutline />, add an address attribute to identify it
         and specify a title so that it can be jumped to with a hyperlink. -->
    <sections>
      <section address="Section1">
        <title>Introduction</title>
        <content>
          <para>
            The basic idea behind Profiles in OSCA is to provide a simple mechanism to define the content of a certificate. Bouncy Castle 
            provides a definition for most (but not all) standard X.509 extensions, but these classes are awkward to use and quite limited in
            their ability to accept changes, or reveal the content of an extension.  To counter this, X.509 extensions in OSCA are specified using
            a reasonably standardised interface that supports quite a lot of flexibility in the way in which an extension is created and manipulated.
            The principle is similar to that of Templates for ADCS, or the certspec for Entrust.
          </para>
          <para>
            As the Profiles idea was being developed a number of new requirements came up for analysing the content of requests, profiling existing certificates
            and manipulating certificate content.  Rather than developing separate mechanisms to cater for these requirements, they were incorporated
            into the Profile system - the result goes some way beyond the basic concept of a certificate template.
          </para>
        </content>
      </section>
      
      <section address="Section2">
        <title>OSCA Profiles</title>
        <content>
          <para>
            This section explains what a profile is, how it can be used and how it can be serialized to/deserialized from a XML file.
          </para>
          <relatedTopics>
            <link xlink:href="af2ac03f-fa08-41c9-8ca6-27ad9d800349">Profile</link>
          </relatedTopics>
        </content>        
      </section>
    </sections>

    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>
